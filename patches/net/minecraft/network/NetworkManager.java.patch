--- ../src-base/minecraft/net/minecraft/network/NetworkManager.java
+++ ../src-work/minecraft/net/minecraft/network/NetworkManager.java
@@ -45,6 +45,8 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
+import red.mohist.Mohist;
+import red.mohist.util.i18n.Message;
 
 public class NetworkManager extends SimpleChannelInboundHandler < Packet<? >>
 {
@@ -76,23 +78,39 @@
     private final EnumPacketDirection direction;
     private final Queue<NetworkManager.InboundHandlerTuplePacketListener> outboundPacketsQueue = Queues.<NetworkManager.InboundHandlerTuplePacketListener>newConcurrentLinkedQueue();
     private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();
-    private Channel channel;
-    private SocketAddress socketAddress;
+    public Channel channel;
+    // Spigot Start // PAIL
+    public SocketAddress socketAddress;
+    public java.util.UUID spoofedUUID;
+    public com.mojang.authlib.properties.Property[] spoofedProfile;
+    public boolean preparing = true;
+    // Spigot End
     private INetHandler packetListener;
     private ITextComponent terminationReason;
     private boolean isEncrypted;
     private boolean disconnected;
 
+    // Paper start - NetworkClient implementation
+    public int protocolVersion;
+    public java.net.InetSocketAddress virtualHost;
+    // Paper end
+
     public NetworkManager(EnumPacketDirection packetDirection)
     {
         this.direction = packetDirection;
     }
 
+    public EnumPacketDirection getDirection()
+    {
+        return this.direction;
+    }
+
     public void channelActive(ChannelHandlerContext p_channelActive_1_) throws Exception
     {
         super.channelActive(p_channelActive_1_);
         this.channel = p_channelActive_1_.channel();
         this.socketAddress = this.channel.remoteAddress();
+        this.preparing = false; // Spigot
 
         try
         {
@@ -204,7 +222,7 @@
         final EnumConnectionState enumconnectionstate = EnumConnectionState.getFromPacket(inPacket);
         final EnumConnectionState enumconnectionstate1 = (EnumConnectionState)this.channel.attr(PROTOCOL_ATTRIBUTE_KEY).get();
 
-        if (enumconnectionstate1 != enumconnectionstate)
+        if (enumconnectionstate1 != enumconnectionstate && !( inPacket instanceof net.minecraftforge.fml.common.network.internal.FMLProxyPacket))
         {
             LOGGER.debug("Disabled auto read");
             this.channel.config().setAutoRead(false);
@@ -212,7 +230,7 @@
 
         if (this.channel.eventLoop().inEventLoop())
         {
-            if (enumconnectionstate != enumconnectionstate1)
+            if (enumconnectionstate != enumconnectionstate1 && !( inPacket instanceof net.minecraftforge.fml.common.network.internal.FMLProxyPacket))
             {
                 this.setConnectionState(enumconnectionstate);
             }
@@ -232,7 +250,7 @@
             {
                 public void run()
                 {
-                    if (enumconnectionstate != enumconnectionstate1)
+                    if (enumconnectionstate != enumconnectionstate1  && !( inPacket instanceof net.minecraftforge.fml.common.network.internal.FMLProxyPacket))
                     {
                         NetworkManager.this.setConnectionState(enumconnectionstate);
                     }
@@ -293,9 +311,12 @@
 
     public void closeChannel(ITextComponent message)
     {
+        this.preparing = false; // Spigot
         if (this.channel.isOpen())
         {
-            this.channel.close().awaitUninterruptibly();
+            // We can't wait as this may be called from an event loop.
+            // this.channel.close().awaitUninterruptibly();
+            this.channel.close();
             this.terminationReason = message;
         }
     }
@@ -308,6 +329,7 @@
     @SideOnly(Side.CLIENT)
     public static NetworkManager createNetworkManagerAndConnect(InetAddress address, int serverPort, boolean useNativeTransport)
     {
+        if (address instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
         final NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.CLIENTBOUND);
         Class <? extends SocketChannel > oclass;
         LazyLoadBase <? extends EventLoopGroup > lazyloadbase;
@@ -404,7 +426,7 @@
             }
             else
             {
-                this.channel.pipeline().addBefore("decoder", "decompress", new NettyCompressionDecoder(threshold));
+                this.channel.pipeline().addAfter("splitter", "decompress", new NettyCompressionDecoder(threshold));
             }
 
             if (this.channel.pipeline().get("compress") instanceof NettyCompressionEncoder)
@@ -436,7 +458,7 @@
         {
             if (this.disconnected)
             {
-                LOGGER.warn("handleDisconnection() called twice");
+                Mohist.LOGGER.warn(Message.getString("server.connect.handler_disconnection"));
             }
             else
             {
@@ -454,6 +476,11 @@
         }
     }
 
+    public Channel channel()
+    {
+        return channel;
+    }
+
     static class InboundHandlerTuplePacketListener
         {
             private final Packet<?> packet;
@@ -465,4 +492,12 @@
                 this.futureListeners = inFutureListeners;
             }
         }
+
+    // Spigot Start
+    public SocketAddress getRawAddress()
+    {
+        return this.channel.remoteAddress();
+    }
+    // Spigot End
+
 }
