--- ../src-base/minecraft/net/minecraft/entity/Entity.java
+++ ../src-work/minecraft/net/minecraft/entity/Entity.java
@@ -1,5 +1,7 @@
 package net.minecraft.entity;
 
+import co.aikar.timings.MinecraftTimings;
+import co.aikar.timings.Timing;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
@@ -10,12 +12,12 @@
 import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.*;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockFence;
 import net.minecraft.block.BlockFenceGate;
-import net.minecraft.block.BlockLiquid;
 import net.minecraft.block.BlockWall;
 import net.minecraft.block.SoundType;
 import net.minecraft.block.material.EnumPushReaction;
@@ -32,6 +34,8 @@
 import net.minecraft.entity.effect.EntityLightningBolt;
 import net.minecraft.entity.item.EntityBoat;
 import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.passive.AbstractHorse;
+import net.minecraft.entity.passive.EntityTameable;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
@@ -77,26 +81,68 @@
 import net.minecraft.util.text.event.HoverEvent;
 import net.minecraft.util.text.translation.I18n;
 import net.minecraft.world.Explosion;
-import net.minecraft.world.Teleporter;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.Server;
+import org.bukkit.TravelAgent;
+import org.bukkit.block.BlockFace;
+import org.bukkit.craftbukkit.v1_12_R1.CraftWorld;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftEntity;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftPlayer;
+import org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.entity.EntityAirChangeEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.entity.EntityPortalEvent;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
+import org.bukkit.event.vehicle.VehicleEnterEvent;
+import org.bukkit.event.vehicle.VehicleExitEvent;
+import org.bukkit.plugin.PluginManager;
+import org.jetbrains.annotations.NotNull;
+import red.mohist.Mohist;
+import red.mohist.common.RealTimeTicking;
+import red.mohist.common.async.Async;
+import red.mohist.common.async.AsyncProperties;
+import red.mohist.common.async.tasks.EntityMoveTask;
+import red.mohist.configuration.MohistConfig;
 
-public abstract class Entity implements ICommandSender
+public abstract class Entity implements ICommandSender, net.minecraftforge.common.capabilities.ICapabilitySerializable<NBTTagCompound>
 {
+    // CraftBukkit start
+    private static final int CURRENT_LEVEL = 2;
+    static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
+        return tag.hasKey("Bukkit.updateLevel") && tag.getInteger("Bukkit.updateLevel") >= level;
+    }
+
+    protected CraftEntity bukkitEntity;
+    public CraftEntity getBukkitEntity() {
+        if (bukkitEntity == null) {
+            bukkitEntity = CraftEntity.getEntity(world.getServer(), this);
+        }
+        return bukkitEntity;
+    }
+    // CraftBukikt end
     private static final Logger LOGGER = LogManager.getLogger();
     private static final List<ItemStack> EMPTY_EQUIPMENT = Collections.<ItemStack>emptyList();
     private static final AxisAlignedBB ZERO_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
     private static double renderDistanceWeight = 1.0D;
-    private static int nextEntityID;
+    private static int nextEntityID = 1; // Paper - MC-111480 - ID 0 is treated as special for DataWatchers, start 1
     private int entityId;
     public boolean preventEntitySpawning;
-    private final List<Entity> riddenByEntities;
+    public final List<Entity> riddenByEntities;  // Spigot
     protected int rideCooldown;
     private Entity ridingEntity;
+    public void setVehicle(Entity entity) { this.ridingEntity = entity; } // Paper // OBFHELPER
     public boolean forceSpawn;
     public World world;
     public double prevPosX;
@@ -137,8 +183,8 @@
     public float entityCollisionReduction;
     protected Random rand;
     public int ticksExisted;
-    private int fire;
-    protected boolean inWater;
+    public int fire;
+    public boolean inWater;
     public int hurtResistantTime;
     protected boolean firstUpdate;
     protected boolean isImmuneToFire;
@@ -172,14 +218,60 @@
     protected UUID entityUniqueID;
     protected String cachedUniqueIdString;
     private final CommandResultStats cmdResultStats;
-    protected boolean glowing;
+    public boolean glowing;
     private final Set<String> tags;
     private boolean isPositionDirty;
     private final double[] pistonDeltas;
     private long pistonDeltasGameTime;
+    /**
+     * Setting this to true will prevent the world from calling {@link #onUpdate()} for this entity.
+     */
+    public boolean updateBlocked;
 
+    // CraftBukkit start
+    public boolean valid;
+    public org.bukkit.projectiles.ProjectileSource projectileSource; // For projectiles only
+    public boolean forceExplosionKnockback; // SPIGOT-949
+    public Timing tickTimer = MinecraftTimings.getEntityTimings(this); // Paper
+
+    public float getBukkitYaw() {
+        return this.rotationYaw;
+    }
+    // CraftBukkit end
+
+    // Spigot start
+    public final byte activationType = org.spigotmc.ActivationRange.initializeEntityActivationType(this);
+    public final boolean defaultActivationState;
+    public long activatedTick = Integer.MIN_VALUE;
+    public boolean fromMobSpawner;
+    public void inactiveTick() { }
+    // Spigot end
+    // Mohist start
+    public int collisionCount = 0;
+    private boolean isInLava;
+    private int lastLavaCheck = Integer.MIN_VALUE;
+    public String spawnReason;
+    // Mohist end
+
+    //ASYNC EDITION
+    @Async
+    public final AsyncProperties asyncProperties;
+
     public Entity(World worldIn)
     {
+
+        boolean isVanilla = this.getClass().getName().startsWith("net.minecraft");
+        boolean canAsync = false;
+        AsyncProperties.Type type;
+        if (isVanilla) type = AsyncProperties.Type.VANILLA;
+        else type = AsyncProperties.Type.MODDED;
+
+        if ((this instanceof EntityLivingBase) && !(this instanceof EntityPlayer || this instanceof IMerchant || this instanceof AbstractHorse || this instanceof IEntityOwnable)) {
+            canAsync = true;
+        }
+
+        asyncProperties = new AsyncProperties(canAsync, type);
+
         this.entityId = nextEntityID++;
         this.riddenByEntities = Lists.<Entity>newArrayList();
         this.boundingBox = ZERO_AABB;
@@ -190,7 +282,7 @@
         this.rand = new Random();
         this.fire = -this.getFireImmuneTicks();
         this.firstUpdate = true;
-        this.entityUniqueID = MathHelper.getRandomUUID(this.rand);
+        this.entityUniqueID = new UUID(ThreadLocalRandom.current().nextLong(), ThreadLocalRandom.current().nextLong());
         this.cachedUniqueIdString = this.entityUniqueID.toString();
         this.cmdResultStats = new CommandResultStats();
         this.tags = Sets.<String>newHashSet();
@@ -200,8 +292,13 @@
 
         if (worldIn != null)
         {
-            this.dimension = worldIn.provider.getDimensionType().getId();
+            this.dimension = worldIn.provider.getDimension();
+            // Spigot start
+            this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, world.spigotConfig);
+        } else {
+            this.defaultActivationState = false;
         }
+        // Spigot end
 
         this.dataManager = new EntityDataManager(this);
         this.dataManager.register(FLAGS, Byte.valueOf((byte)0));
@@ -211,8 +308,18 @@
         this.dataManager.register(SILENT, Boolean.valueOf(false));
         this.dataManager.register(NO_GRAVITY, Boolean.valueOf(false));
         this.entityInit();
+        if(!(this instanceof EntityPlayer)) { // Mohist - move to EntityPlayer
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EntityConstructing(this));
+            capabilities = net.minecraftforge.event.ForgeEventFactory.gatherCapabilities(this);
+        }
     }
 
+    /** Forge: Used to store custom data for each entity. */
+    private NBTTagCompound customEntityData;
+    public boolean captureDrops = false;
+    public java.util.ArrayList<EntityItem> capturedDrops = new java.util.ArrayList<EntityItem>();
+    public net.minecraftforge.common.capabilities.CapabilityDispatcher capabilities; // Mohist - private -> public
+
     public int getEntityId()
     {
         return this.entityId;
@@ -289,7 +396,7 @@
                     break;
                 }
 
-                ++this.posY;
+            ++this.posY;
             }
 
             this.motionX = 0.0D;
@@ -333,8 +440,35 @@
         }
     }
 
-    protected void setRotation(float yaw, float pitch)
+    public void setRotation(float yaw, float pitch)
     {
+        // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
+        if (Float.isNaN(yaw)) {
+            yaw = 0;
+        }
+
+        if (yaw == Float.POSITIVE_INFINITY || yaw == Float.NEGATIVE_INFINITY) {
+            if (this instanceof EntityPlayerMP) {
+                Mohist.LOGGER.warn(this.getName() + " was caught trying to crash the server with an invalid yaw");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Nope");
+            }
+            yaw = 0;
+        }
+
+        // pitch was sometimes set to NaN, so we need to set it back to 0
+        if (Float.isNaN(pitch)) {
+            pitch = 0;
+        }
+
+        if (pitch == Float.POSITIVE_INFINITY || pitch == Float.NEGATIVE_INFINITY) {
+            if (this instanceof EntityPlayerMP) {
+                Mohist.LOGGER.warn(this.getName() + " was caught trying to crash the server with an invalid pitch");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Nope");
+            }
+            pitch = 0;
+        }
+        // CraftBukkit end
+
         this.rotationYaw = yaw % 360.0F;
         this.rotationPitch = pitch % 360.0F;
     }
@@ -344,6 +478,7 @@
         this.posX = x;
         this.posY = y;
         this.posZ = z;
+        if (this.isAddedToWorld() && !this.world.isRemote) this.world.updateEntityWithOptionalForce(this, false); // Forge - Process chunk registration after moving.
         float f = this.width / 2.0F;
         float f1 = this.height;
         this.setEntityBoundingBox(new AxisAlignedBB(x - (double)f, y, z - (double)f, x + (double)f, y + (double)f1, z + (double)f));
@@ -376,72 +511,40 @@
         this.onEntityUpdate();
     }
 
-    public void onEntityUpdate()
-    {
-        this.world.profiler.startSection("entityBaseTick");
-
-        if (this.isRiding() && this.getRidingEntity().isDead)
-        {
-            this.dismountRidingEntity();
-        }
-
-        if (this.rideCooldown > 0)
-        {
-            --this.rideCooldown;
-        }
-
-        this.prevDistanceWalkedModified = this.distanceWalkedModified;
-        this.prevPosX = this.posX;
-        this.prevPosY = this.posY;
-        this.prevPosZ = this.posZ;
-        this.prevRotationPitch = this.rotationPitch;
-        this.prevRotationYaw = this.rotationYaw;
-
-        if (!this.world.isRemote && this.world instanceof WorldServer)
-        {
+    public void postTick() {
+        // No clean way to break out of ticking once the entity has been copied to a new world, so instead we move the portalling later in the tick cycle
+        if (!this.world.isRemote && this.world instanceof WorldServer) {
             this.world.profiler.startSection("portal");
-
-            if (this.inPortal)
-            {
+            if (this.inPortal) {
                 MinecraftServer minecraftserver = this.world.getMinecraftServer();
 
-                if (minecraftserver.getAllowNether())
-                {
-                    if (!this.isRiding())
-                    {
+                if (true || minecraftserver.getAllowNether()) { // CraftBukkit
+                    if (!this.isRiding()) {
                         int i = this.getMaxInPortalTime();
 
-                        if (this.portalCounter++ >= i)
-                        {
+                        if (this.portalCounter++ >= i) {
                             this.portalCounter = i;
                             this.timeUntilPortal = this.getPortalCooldown();
-                            int j;
+                            byte b0;
 
-                            if (this.world.provider.getDimensionType().getId() == -1)
-                            {
-                                j = 0;
+                            if (this.world.provider.getDimensionType().getId() == -1) {
+                                b0 = 0;
+                            } else {
+                                b0 = -1;
                             }
-                            else
-                            {
-                                j = -1;
-                            }
 
-                            this.changeDimension(j);
+                            this.changeDimension(b0);
                         }
                     }
 
                     this.inPortal = false;
                 }
-            }
-            else
-            {
-                if (this.portalCounter > 0)
-                {
+            } else {
+                if (this.portalCounter > 0) {
                     this.portalCounter -= 4;
                 }
 
-                if (this.portalCounter < 0)
-                {
+                if (this.portalCounter < 0) {
                     this.portalCounter = 0;
                 }
             }
@@ -449,7 +552,33 @@
             this.decrementTimeUntilPortal();
             this.world.profiler.endSection();
         }
+    }
 
+    public void onEntityUpdate()
+    {
+        this.world.profiler.startSection("entityBaseTick");
+
+        if (this.isRiding() && this.getRidingEntity().isDead)
+        {
+            this.dismountRidingEntity();
+        }
+
+        if (this.rideCooldown > 0)
+        {
+            if (MohistConfig.instance.RealTimeTicking()) {
+                int ticks = (int) ((RealTimeTicking) this.world).getRealTimeTicks();
+                this.rideCooldown = Math.max(0, this.rideCooldown - ticks);
+            } else {
+                --this.rideCooldown;
+            }
+        }
+
+        this.prevDistanceWalkedModified = this.distanceWalkedModified;
+        this.prevPosX = this.posX;
+        this.prevPosY = this.posY;
+        this.prevPosZ = this.posZ;
+        this.prevRotationPitch = this.rotationPitch;
+        this.prevRotationYaw = this.rotationYaw;
         this.spawnRunningParticles();
         this.handleWaterMovement();
 
@@ -517,6 +646,28 @@
         if (!this.isImmuneToFire)
         {
             this.attackEntityFrom(DamageSource.LAVA, 4.0F);
+            // CraftBukkit start - Fallen in lava TODO: this event spams!
+			if (this instanceof EntityLivingBase) {
+                if (!this.isEntityAlive())
+                    return;
+                if (fire <= 0) {
+                    // not on fire yet
+                    // TODO: shouldn't be sending null for the block
+                    org.bukkit.block.Block damager = null; // ((WorldServer) this.l).getWorld().getBlockAt(i, j, k);
+                    org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+                    EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(damager, damagee, 15);
+                    this.world.getServer().getPluginManager().callEvent(combustEvent);
+
+                    if (!combustEvent.isCancelled()) {
+                        this.setFire(combustEvent.getDuration());
+                    }
+                } else {
+                    // This will be called every single tick the entity is in lava, so don't throw an event
+                    this.setFire(15);
+                }
+                return;
+            }
+            // CraftBukkit end - we also don't throw an event unless the object in lava is living, to save on some event calls
             this.setFire(15);
         }
     }
@@ -557,7 +708,18 @@
         return this.world.getCollisionBoxes(this, bb).isEmpty() && !this.world.containsAnyLiquid(bb);
     }
 
-    public void move(MoverType type, double x, double y, double z)
+    public void move(MoverType type, double x, double y, double z) {
+
+        if (this.asyncProperties.canAsync()) {
+            //world.addEntityMoveQueue(new EntityMoveTask(this.asyncProperties, this, type, x, y, z, System.currentTimeMillis()));
+            moveEntity(type, x , y, z, false, this.asyncProperties.getAsyncType());
+        }  else {
+            moveEntity(type, x , y, z, false, this.asyncProperties.getAsyncType());
+        }
+    }
+
+
+    public void moveEntity(MoverType type, double x, double y, double z, boolean async, AsyncProperties.Type asyncType)
     {
         if (this.noClip)
         {
@@ -566,6 +728,22 @@
         }
         else
         {
+            // CraftBukkit start - Don't do anything if we aren't moving
+            // We need to do this regardless of whether or not we are moving thanks to portals
+            try {
+                this.doBlockCollisions();
+            } catch (Throwable throwable) {
+                CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Checking entity block collision");
+                CrashReportCategory crashreportsystemdetails = crashreport.makeCategory("Entity being checked for collision");
+
+                this.addEntityCrashInfo(crashreportsystemdetails);
+                throw new ReportedException(crashreport);
+            }
+            // Check if we're moving
+            if (x == 0 && y == 0 && z == 0 && this.isBeingRidden() && this.isRiding()) {
+                return;
+            }
+            // CraftBukkit end
             if (type == MoverType.PISTON)
             {
                 long i = this.world.getTotalWorldTime();
@@ -899,6 +1077,30 @@
                 block.onLanded(this.world, this);
             }
 
+            if (collidedHorizontally && getBukkitEntity() instanceof Vehicle) {
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.block.Block bl = this.world.getWorld().getBlockAt(MathHelper.floor(this.posX), MathHelper.floor(this.posY), MathHelper.floor(this.posZ));
+
+                if (d2 > x) {
+                    bl = bl.getRelative(BlockFace.EAST);
+                } else if (d2 < x) {
+                    bl = bl.getRelative(BlockFace.WEST);
+                } else if (d4 > z) {
+                    bl = bl.getRelative(BlockFace.SOUTH);
+                } else if (d4 < z) {
+                    bl = bl.getRelative(BlockFace.NORTH);
+                }
+
+                if (bl.getType() != org.bukkit.Material.AIR) {
+                    VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
+                    if (async) {
+                        getServer().processQueue.add(() -> world.getServer().getPluginManager().callEvent(event));
+                    }else {
+                        world.getServer().getPluginManager().callEvent(event);
+                    }
+                }
+            }
+
             if (this.canTriggerWalking() && (!this.onGround || !this.isSneaking() || !(this instanceof EntityPlayer)) && !this.isRiding())
             {
                 double d15 = this.posX - d10;
@@ -945,7 +1147,82 @@
                     this.nextFlap = this.playFlySound(this.distanceWalkedOnStepModified);
                 }
             }
+            // Move to the top of the method
+            /*
+            try
+            {
+                this.doBlockCollisions();
+            }
+            catch (Throwable throwable)
+            {
+                CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Checking entity block collision");
+                CrashReportCategory crashreportcategory = crashreport.makeCategory("Entity being checked for collision");
+                this.addEntityCrashInfo(crashreportcategory);
+                throw new ReportedException(crashreport);
+            }
+            */
 
+            boolean flag1 = this.isWet();
+
+            if (this.world.isFlammableWithin(this.getEntityBoundingBox().shrink(0.001D)))
+            {
+                this.dealFireDamage(1);
+
+                if (!flag1)
+                {
+                    ++this.fire;
+
+                    if (this.fire == 0)
+                    {
+//                        this.setFire(8);
+                        EntityCombustEvent event = new org.bukkit.event.entity.EntityCombustByBlockEvent(null, getBukkitEntity(), 8);
+                        if (async) {
+                            getServer().processQueue.add(() -> {
+                                world.getServer().getPluginManager().callEvent(event);
+
+                                if (!event.isCancelled()) {
+                                    Entity.this.setFire(event.getDuration());
+                                }
+                            });
+
+                        }else {
+                            world.getServer().getPluginManager().callEvent(event);
+
+                            if (!event.isCancelled()) {
+                                this.setFire(event.getDuration());
+                            }
+                        }
+                    }
+                }
+            }
+            else if (this.fire <= 0)
+            {
+                this.fire = -this.getFireImmuneTicks();
+            }
+
+            if (flag1 && this.isBurning())
+            {
+                this.playSound(SoundEvents.ENTITY_GENERIC_EXTINGUISH_FIRE, 0.7F, 1.6F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
+                this.fire = -this.getFireImmuneTicks();
+            }
+
+            this.world.profiler.endSection();
+        }
+    }
+
+    public void moveEntityold(MoverType type, double x, double y, double z, boolean async, AsyncProperties.Type entityType)
+    {
+        if (this.noClip)
+        {
+            this.setEntityBoundingBox(this.getEntityBoundingBox().offset(x, y, z));
+            this.resetPositionToBB();
+        }
+        else
+        {
+            double d2 = x;
+            double d3 = y;
+            double d4 = z;
+            // CraftBukkit start - Check if we're moving
             try
             {
                 this.doBlockCollisions();
@@ -957,7 +1234,413 @@
                 this.addEntityCrashInfo(crashreportcategory);
                 throw new ReportedException(crashreport);
             }
+            if (x == 0 && y == 0 && z == 0 && this.isBeingRidden() && this.isRiding()) {
+                return;
+            }
+            // CraftBukkit end
+            if (type == MoverType.PISTON)
+            {
+                long i = this.world.getTotalWorldTime();
 
+                if (i != this.pistonDeltasGameTime)
+                {
+                    Arrays.fill(this.pistonDeltas, 0.0D);
+                    this.pistonDeltasGameTime = i;
+                }
+
+                if (x != 0.0D)
+                {
+                    int j = EnumFacing.Axis.X.ordinal();
+                    double d0 = MathHelper.clamp(x + this.pistonDeltas[j], -0.51D, 0.51D);
+                    x = d0 - this.pistonDeltas[j];
+                    this.pistonDeltas[j] = d0;
+
+                    if (Math.abs(x) <= 9.999999747378752E-6D)
+                    {
+                        return;
+                    }
+                }
+                else if (y != 0.0D)
+                {
+                    int l4 = EnumFacing.Axis.Y.ordinal();
+                    double d12 = MathHelper.clamp(y + this.pistonDeltas[l4], -0.51D, 0.51D);
+                    y = d12 - this.pistonDeltas[l4];
+                    this.pistonDeltas[l4] = d12;
+
+                    if (Math.abs(y) <= 9.999999747378752E-6D)
+                    {
+                        return;
+                    }
+                }
+                else
+                {
+                    if (z == 0.0D)
+                    {
+                        return;
+                    }
+
+                    int i5 = EnumFacing.Axis.Z.ordinal();
+                    double d13 = MathHelper.clamp(z + this.pistonDeltas[i5], -0.51D, 0.51D);
+                    z = d13 - this.pistonDeltas[i5];
+                    this.pistonDeltas[i5] = d13;
+
+                    if (Math.abs(z) <= 9.999999747378752E-6D)
+                    {
+                        return;
+                    }
+                }
+            }
+
+            this.world.profiler.startSection("move");
+            double d10 = this.posX;
+            double d11 = this.posY;
+            double d1 = this.posZ;
+
+            if (this.isInWeb)
+            {
+                this.isInWeb = false;
+                x *= 0.25D;
+                y *= 0.05000000074505806D;
+                z *= 0.25D;
+                this.motionX = 0.0D;
+                this.motionY = 0.0D;
+                this.motionZ = 0.0D;
+            }
+
+            if ((type == MoverType.SELF || type == MoverType.PLAYER) && this.onGround && this.isSneaking() && this instanceof EntityPlayer)
+            {
+                for (double d5 = 0.05D; x != 0.0D && this.world.getCollisionBoxes(this, this.getEntityBoundingBox().offset(x, (double)(-this.stepHeight), 0.0D)).isEmpty(); d2 = x)
+                {
+                    if (x < 0.05D && x >= -0.05D)
+                    {
+                        x = 0.0D;
+                    }
+                    else if (x > 0.0D)
+                    {
+                        x -= 0.05D;
+                    }
+                    else
+                    {
+                        x += 0.05D;
+                    }
+                }
+
+                for (; z != 0.0D && this.world.getCollisionBoxes(this, this.getEntityBoundingBox().offset(0.0D, (double)(-this.stepHeight), z)).isEmpty(); d4 = z)
+                {
+                    if (z < 0.05D && z >= -0.05D)
+                    {
+                        z = 0.0D;
+                    }
+                    else if (z > 0.0D)
+                    {
+                        z -= 0.05D;
+                    }
+                    else
+                    {
+                        z += 0.05D;
+                    }
+                }
+
+                for (; x != 0.0D && z != 0.0D && this.world.getCollisionBoxes(this, this.getEntityBoundingBox().offset(x, (double)(-this.stepHeight), z)).isEmpty(); d4 = z)
+                {
+                    if (x < 0.05D && x >= -0.05D)
+                    {
+                        x = 0.0D;
+                    }
+                    else if (x > 0.0D)
+                    {
+                        x -= 0.05D;
+                    }
+                    else
+                    {
+                        x += 0.05D;
+                    }
+
+                    d2 = x;
+
+                    if (z < 0.05D && z >= -0.05D)
+                    {
+                        z = 0.0D;
+                    }
+                    else if (z > 0.0D)
+                    {
+                        z -= 0.05D;
+                    }
+                    else
+                    {
+                        z += 0.05D;
+                    }
+                }
+            }
+
+            List<AxisAlignedBB> list1 = this.world.getCollisionBoxes(this, this.getEntityBoundingBox().expand(x, y, z));
+            AxisAlignedBB axisalignedbb = this.getEntityBoundingBox();
+
+            if (y != 0.0D)
+            {
+                int k = 0;
+
+                for (int l = list1.size(); k < l; ++k)
+                {
+                    y = ((AxisAlignedBB)list1.get(k)).calculateYOffset(this.getEntityBoundingBox(), y);
+                }
+
+                this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, y, 0.0D));
+            }
+
+            if (x != 0.0D)
+            {
+                int j5 = 0;
+
+                for (int l5 = list1.size(); j5 < l5; ++j5)
+                {
+                    x = ((AxisAlignedBB)list1.get(j5)).calculateXOffset(this.getEntityBoundingBox(), x);
+                }
+
+                if (x != 0.0D)
+                {
+                    this.setEntityBoundingBox(this.getEntityBoundingBox().offset(x, 0.0D, 0.0D));
+                }
+            }
+
+            if (z != 0.0D)
+            {
+                int k5 = 0;
+
+                for (int i6 = list1.size(); k5 < i6; ++k5)
+                {
+                    z = ((AxisAlignedBB)list1.get(k5)).calculateZOffset(this.getEntityBoundingBox(), z);
+                }
+
+                if (z != 0.0D)
+                {
+                    this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, 0.0D, z));
+                }
+            }
+
+            boolean flag = this.onGround || d3 != y && d3 < 0.0D;
+
+            if (this.stepHeight > 0.0F && flag && (d2 != x || d4 != z))
+            {
+                double d14 = x;
+                double d6 = y;
+                double d7 = z;
+                AxisAlignedBB axisalignedbb1 = this.getEntityBoundingBox();
+                this.setEntityBoundingBox(axisalignedbb);
+                y = (double)this.stepHeight;
+                List<AxisAlignedBB> list = this.world.getCollisionBoxes(this, this.getEntityBoundingBox().expand(d2, y, d4));
+                AxisAlignedBB axisalignedbb2 = this.getEntityBoundingBox();
+                AxisAlignedBB axisalignedbb3 = axisalignedbb2.expand(d2, 0.0D, d4);
+                double d8 = y;
+                int j1 = 0;
+
+                for (int k1 = list.size(); j1 < k1; ++j1)
+                {
+                    d8 = ((AxisAlignedBB)list.get(j1)).calculateYOffset(axisalignedbb3, d8);
+                }
+
+                axisalignedbb2 = axisalignedbb2.offset(0.0D, d8, 0.0D);
+                double d18 = d2;
+                int l1 = 0;
+
+                for (int i2 = list.size(); l1 < i2; ++l1)
+                {
+                    d18 = ((AxisAlignedBB)list.get(l1)).calculateXOffset(axisalignedbb2, d18);
+                }
+
+                axisalignedbb2 = axisalignedbb2.offset(d18, 0.0D, 0.0D);
+                double d19 = d4;
+                int j2 = 0;
+
+                for (int k2 = list.size(); j2 < k2; ++j2)
+                {
+                    d19 = ((AxisAlignedBB)list.get(j2)).calculateZOffset(axisalignedbb2, d19);
+                }
+
+                axisalignedbb2 = axisalignedbb2.offset(0.0D, 0.0D, d19);
+                AxisAlignedBB axisalignedbb4 = this.getEntityBoundingBox();
+                double d20 = y;
+                int l2 = 0;
+
+                for (int i3 = list.size(); l2 < i3; ++l2)
+                {
+                    d20 = ((AxisAlignedBB)list.get(l2)).calculateYOffset(axisalignedbb4, d20);
+                }
+
+                axisalignedbb4 = axisalignedbb4.offset(0.0D, d20, 0.0D);
+                double d21 = d2;
+                int j3 = 0;
+
+                for (int k3 = list.size(); j3 < k3; ++j3)
+                {
+                    d21 = ((AxisAlignedBB)list.get(j3)).calculateXOffset(axisalignedbb4, d21);
+                }
+
+                axisalignedbb4 = axisalignedbb4.offset(d21, 0.0D, 0.0D);
+                double d22 = d4;
+                int l3 = 0;
+
+                for (int i4 = list.size(); l3 < i4; ++l3)
+                {
+                    d22 = ((AxisAlignedBB)list.get(l3)).calculateZOffset(axisalignedbb4, d22);
+                }
+
+                axisalignedbb4 = axisalignedbb4.offset(0.0D, 0.0D, d22);
+                double d23 = d18 * d18 + d19 * d19;
+                double d9 = d21 * d21 + d22 * d22;
+
+                if (d23 > d9)
+                {
+                    x = d18;
+                    z = d19;
+                    y = -d8;
+                    this.setEntityBoundingBox(axisalignedbb2);
+                }
+                else
+                {
+                    x = d21;
+                    z = d22;
+                    y = -d20;
+                    this.setEntityBoundingBox(axisalignedbb4);
+                }
+
+                int j4 = 0;
+
+                for (int k4 = list.size(); j4 < k4; ++j4)
+                {
+                    y = ((AxisAlignedBB)list.get(j4)).calculateYOffset(this.getEntityBoundingBox(), y);
+                }
+
+                this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, y, 0.0D));
+
+                if (d14 * d14 + d7 * d7 >= x * x + z * z)
+                {
+                    x = d14;
+                    y = d6;
+                    z = d7;
+                    this.setEntityBoundingBox(axisalignedbb1);
+                }
+            }
+
+            this.world.profiler.endSection();
+            this.world.profiler.startSection("rest");
+            this.resetPositionToBB();
+            this.collidedHorizontally = d2 != x || d4 != z;
+            this.collidedVertically = d3 != y;
+            this.onGround = this.collidedVertically && d3 < 0.0D;
+            this.collided = this.collidedHorizontally || this.collidedVertically;
+            int j6 = MathHelper.floor(this.posX);
+            int i1 = MathHelper.floor(this.posY - 0.20000000298023224D);
+            int k6 = MathHelper.floor(this.posZ);
+            BlockPos blockpos = new BlockPos(j6, i1, k6);
+            IBlockState iblockstate = this.world.getBlockState(blockpos);
+
+            if (iblockstate.getMaterial() == Material.AIR)
+            {
+                BlockPos blockpos1 = blockpos.down();
+                IBlockState iblockstate1 = this.world.getBlockState(blockpos1);
+                Block block1 = iblockstate1.getBlock();
+
+                if (block1 instanceof BlockFence || block1 instanceof BlockWall || block1 instanceof BlockFenceGate)
+                {
+                    iblockstate = iblockstate1;
+                    blockpos = blockpos1;
+                }
+            }
+
+            this.updateFallState(y, this.onGround, iblockstate, blockpos);
+
+            if (d2 != x)
+            {
+                this.motionX = 0.0D;
+            }
+
+            if (d4 != z)
+            {
+                this.motionZ = 0.0D;
+            }
+
+            Block block = iblockstate.getBlock();
+
+            if (d3 != y)
+            {
+                block.onLanded(this.world, this);
+            }
+
+            if (collidedHorizontally && getBukkitEntity() instanceof Vehicle) {
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.block.Block bl = this.world.getWorld().getBlockAt(MathHelper.floor(this.posX), MathHelper.floor(this.posY), MathHelper.floor(this.posZ));
+
+                if (d2 > x) {
+                    bl = bl.getRelative(BlockFace.EAST);
+                } else if (d2 < x) {
+                    bl = bl.getRelative(BlockFace.WEST);
+                } else if (d4 > z) {
+                    bl = bl.getRelative(BlockFace.SOUTH);
+                } else if (d4 < z) {
+                    bl = bl.getRelative(BlockFace.NORTH);
+                }
+
+                if (bl.getType() != org.bukkit.Material.AIR) {
+
+                    @Async
+                    VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
+                    if (async) {
+                        getServer().processQueue.add(()-> world.getServer().getPluginManager().callEvent(event));
+                    } else {
+                        world.getServer().getPluginManager().callEvent(event);
+                    }
+
+                }
+            }
+
+            if (this.canTriggerWalking() && (!this.onGround || !this.isSneaking() || !(this instanceof EntityPlayer)) && !this.isRiding())
+            {
+                double d15 = this.posX - d10;
+                double d16 = this.posY - d11;
+                double d17 = this.posZ - d1;
+
+                if (block != Blocks.LADDER)
+                {
+                    d16 = 0.0D;
+                }
+
+                if (block != null && this.onGround)
+                {
+                    block.onEntityWalk(this.world, blockpos, this);
+                }
+
+                this.distanceWalkedModified = (float)((double)this.distanceWalkedModified + (double)MathHelper.sqrt(d15 * d15 + d17 * d17) * 0.6D);
+                this.distanceWalkedOnStepModified = (float)((double)this.distanceWalkedOnStepModified + (double)MathHelper.sqrt(d15 * d15 + d16 * d16 + d17 * d17) * 0.6D);
+
+                if (this.distanceWalkedOnStepModified > (float)this.nextStepDistance && iblockstate.getMaterial() != Material.AIR)
+                {
+                    this.nextStepDistance = (int)this.distanceWalkedOnStepModified + 1;
+
+                    if (this.isInWater())
+                    {
+                        Entity entity = this.isBeingRidden() && this.getControllingPassenger() != null ? this.getControllingPassenger() : this;
+                        float f = entity == this ? 0.35F : 0.4F;
+                        float f1 = MathHelper.sqrt(entity.motionX * entity.motionX * 0.20000000298023224D + entity.motionY * entity.motionY + entity.motionZ * entity.motionZ * 0.20000000298023224D) * f;
+
+                        if (f1 > 1.0F)
+                        {
+                            f1 = 1.0F;
+                        }
+
+                        this.playSound(this.getSwimSound(), f1, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
+                    }
+                    else
+                    {
+                        this.playStepSound(blockpos, block);
+                    }
+                }
+                else if (this.distanceWalkedOnStepModified > this.nextFlap && this.makeFlySound() && iblockstate.getMaterial() == Material.AIR)
+                {
+                    this.nextFlap = this.playFlySound(this.distanceWalkedOnStepModified);
+                }
+            }
+
             boolean flag1 = this.isWet();
 
             if (this.world.isFlammableWithin(this.getEntityBoundingBox().shrink(0.001D)))
@@ -970,7 +1653,18 @@
 
                     if (this.fire == 0)
                     {
-                        this.setFire(8);
+                        EntityCombustEvent event = new org.bukkit.event.entity.EntityCombustByBlockEvent(null, getBukkitEntity(), 8);
+
+                        if (async) {
+                            getServer().processQueue.add(() -> world.getServer().getPluginManager().callEvent(event));
+                        } else {
+                            world.getServer().getPluginManager().callEvent(event);
+                        }
+
+
+                        if (!event.isCancelled()) {
+                            this.setFire(event.getDuration());
+                        }
                     }
                 }
             }
@@ -995,6 +1689,7 @@
         this.posX = (axisalignedbb.minX + axisalignedbb.maxX) / 2.0D;
         this.posY = axisalignedbb.minY;
         this.posZ = (axisalignedbb.minZ + axisalignedbb.maxZ) / 2.0D;
+        if (this.isAddedToWorld && !this.world.isRemote) this.world.updateEntityWithOptionalForce(this, false); // Forge - Process chunk registration after moving.
     }
 
     protected SoundEvent getSwimSound()
@@ -1027,8 +1722,16 @@
 
                         try
                         {
-                            iblockstate.getBlock().onEntityCollidedWithBlock(this.world, blockpos$pooledmutableblockpos2, iblockstate, this);
-                            this.onInsideBlock(iblockstate);
+                            if (this.world.getWorld() != null) {
+                                CraftEventFactory.blockDamage = this.world.getWorld().getBlockAt(blockpos$pooledmutableblockpos2.getX(), blockpos$pooledmutableblockpos2.getY(), blockpos$pooledmutableblockpos2.getZ());
+                                iblockstate.getBlock().onEntityCollidedWithBlock(this.world, blockpos$pooledmutableblockpos2, iblockstate, this);
+                                this.onInsideBlock(iblockstate);
+                                CraftEventFactory.blockDamage = null;
+
+                            } else {
+                                iblockstate.getBlock().onEntityCollidedWithBlock(this.world, blockpos$pooledmutableblockpos2, iblockstate, this);
+                                this.onInsideBlock(iblockstate);
+                            }
                         }
                         catch (Throwable throwable)
                         {
@@ -1053,7 +1756,7 @@
 
     protected void playStepSound(BlockPos pos, Block blockIn)
     {
-        SoundType soundtype = blockIn.getSoundType();
+        SoundType soundtype = blockIn.getSoundType(world.getBlockState(pos), world, pos, this);
 
         if (this.world.getBlockState(pos.up()).getBlock() == Blocks.SNOW_LAYER)
         {
@@ -1140,6 +1843,14 @@
         }
     }
 
+    protected void dealFireDamage(float amount)
+    {
+        if (!this.isImmuneToFire)
+        {
+            this.attackEntityFrom(DamageSource.IN_FIRE, (float)amount);
+        }
+    }
+
     public final boolean isImmuneToFire()
     {
         return this.isImmuneToFire;
@@ -1259,6 +1970,7 @@
         BlockPos blockpos = new BlockPos(i, j, k);
         IBlockState iblockstate = this.world.getBlockState(blockpos);
 
+        if(!iblockstate.getBlock().addRunningEffects(iblockstate, world, blockpos, this))
         if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE)
         {
             this.world.spawnParticle(EnumParticleTypes.BLOCK_CRACK, this.posX + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, this.getEntityBoundingBox().minY + 0.1D, this.posZ + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, -this.motionX * 4.0D, 1.5D, -this.motionZ * 4.0D, Block.getStateId(iblockstate));
@@ -1277,12 +1989,12 @@
             BlockPos blockpos = new BlockPos(this.posX, d0, this.posZ);
             IBlockState iblockstate = this.world.getBlockState(blockpos);
 
+            Boolean result = iblockstate.getBlock().isEntityInsideMaterial(this.world, blockpos, iblockstate, this, d0, materialIn, true);
+            if (result != null) return result;
+
             if (iblockstate.getMaterial() == materialIn)
             {
-                float f = BlockLiquid.getLiquidHeightPercent(iblockstate.getBlock().getMetaFromState(iblockstate)) - 0.11111111F;
-                float f1 = (float)(blockpos.getY() + 1) - f;
-                boolean flag = d0 < (double)f1;
-                return !flag && this instanceof EntityPlayer ? false : flag;
+                return net.minecraftforge.common.ForgeHooks.isInsideOfMaterial(materialIn, this, blockpos);
             }
             else
             {
@@ -1293,7 +2005,12 @@
 
     public boolean isInLava()
     {
-        return this.world.isMaterialInBB(this.getEntityBoundingBox().grow(-0.10000000149011612D, -0.4000000059604645D, -0.10000000149011612D), Material.LAVA);
+        int currentTick = MinecraftServer.currentTick;
+        if (this.lastLavaCheck != currentTick) {
+            this.lastLavaCheck = currentTick;
+            this.isInLava = this.world.isMaterialInBB(this.getEntityBoundingBox().grow(-0.10000000149011612D, -0.4000000059604645D, -0.10000000149011612D), Material.LAVA);
+        }
+        return this.isInLava;
     }
 
     public void moveRelative(float strafe, float up, float forward, float friction)
@@ -1354,6 +2071,11 @@
 
     public void setWorld(World worldIn)
     {
+        if (world == null) {
+            setDead();
+            this.world = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
+            return;
+        }
         this.world = worldIn;
     }
 
@@ -1382,6 +2104,7 @@
             this.prevRotationYaw -= 360.0F;
         }
 
+        if (!this.world.isRemote) this.world.getChunkFromChunkCoords((int) Math.floor(this.posX) >> 4, (int) Math.floor(this.posZ) >> 4); // Forge - ensure target chunk is loaded.
         this.setPosition(this.posX, this.posY, this.posZ);
         this.setRotation(yaw, pitch);
     }
@@ -1671,6 +2394,16 @@
         {
             compound.setTag("Pos", this.newDoubleNBTList(this.posX, this.posY, this.posZ));
             compound.setTag("Motion", this.newDoubleNBTList(this.motionX, this.motionY, this.motionZ));
+            // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
+            // TODO: make sure this is the best way to address this.
+            if (Float.isNaN(this.rotationYaw)) {
+                this.rotationYaw = 0;
+            }
+
+            if (Float.isNaN(this.rotationPitch)) {
+                this.rotationPitch = 0;
+            }
+            // CraftBukkit end
             compound.setTag("Rotation", this.newFloatNBTList(this.rotationYaw, this.rotationPitch));
             compound.setFloat("FallDistance", this.fallDistance);
             compound.setShort("Fire", (short)this.fire);
@@ -1680,7 +2413,17 @@
             compound.setBoolean("Invulnerable", this.invulnerable);
             compound.setInteger("PortalCooldown", this.timeUntilPortal);
             compound.setUniqueId("UUID", this.getUniqueID());
-
+            AxisAlignedBB aabb = this.getEntityBoundingBox();
+            compound.setTag("AABB", this.newDoubleNBTList(aabb.minX, aabb.minY, aabb.minZ, aabb.maxX, aabb.maxY, aabb.maxZ));
+            // CraftBukkit start
+            // PAIL: Check above UUID reads 1.8 properly, ie: UUIDMost / UUIDLeast
+            if (this.world != null) {
+                compound.setLong("WorldUUIDLeast", this.world.getSaveHandler().getUUID().getLeastSignificantBits());
+                compound.setLong("WorldUUIDMost", this.world.getSaveHandler().getUUID().getMostSignificantBits());
+            }
+            compound.setInteger("Bukkit.updateLevel", CURRENT_LEVEL);
+            compound.setInteger("Spigot.ticksLived", this.ticksExisted);
+            // CraftBukkit end
             if (this.hasCustomName())
             {
                 compound.setString("CustomName", this.getCustomNameTag());
@@ -1707,6 +2450,7 @@
             {
                 compound.setBoolean("Glowing", this.glowing);
             }
+            compound.setBoolean("UpdateBlocked", updateBlocked);
 
             if (!this.tags.isEmpty())
             {
@@ -1720,6 +2464,9 @@
                 compound.setTag("Tags", nbttaglist);
             }
 
+            if (customEntityData != null) compound.setTag("ForgeData", customEntityData);
+            if (this.capabilities != null) compound.setTag("ForgeCaps", this.capabilities.serializeNBT());
+
             this.writeEntityToNBT(compound);
 
             if (this.isBeingRidden())
@@ -1741,7 +2488,6 @@
                     compound.setTag("Passengers", nbttaglist1);
                 }
             }
-
             return compound;
         }
         catch (Throwable throwable)
@@ -1764,21 +2510,6 @@
             this.motionY = nbttaglist2.getDoubleAt(1);
             this.motionZ = nbttaglist2.getDoubleAt(2);
 
-            if (Math.abs(this.motionX) > 10.0D)
-            {
-                this.motionX = 0.0D;
-            }
-
-            if (Math.abs(this.motionY) > 10.0D)
-            {
-                this.motionY = 0.0D;
-            }
-
-            if (Math.abs(this.motionZ) > 10.0D)
-            {
-                this.motionZ = 0.0D;
-            }
-
             this.posX = nbttaglist.getDoubleAt(0);
             this.posY = nbttaglist.getDoubleAt(1);
             this.posZ = nbttaglist.getDoubleAt(2);
@@ -1826,7 +2557,11 @@
             this.setSilent(compound.getBoolean("Silent"));
             this.setNoGravity(compound.getBoolean("NoGravity"));
             this.setGlowing(compound.getBoolean("Glowing"));
+            updateBlocked = compound.getBoolean("UpdateBlocked");
 
+            if (compound.hasKey("ForgeData")) customEntityData = compound.getCompoundTag("ForgeData");
+            if (this.capabilities != null && compound.hasKey("ForgeCaps")) this.capabilities.deserializeNBT(compound.getCompoundTag("ForgeCaps"));
+
             if (compound.hasKey("Tags", 9))
             {
                 this.tags.clear();
@@ -1845,6 +2580,72 @@
             {
                 this.setPosition(this.posX, this.posY, this.posZ);
             }
+
+            if (compound.hasKey("AABB", 9))
+            {
+                NBTTagList aabb_tag = compound.getTagList("AABB", 6);
+
+                AxisAlignedBB aabb = new AxisAlignedBB(aabb_tag.getDoubleAt(0), aabb_tag.getDoubleAt(1), aabb_tag.getDoubleAt(2), aabb_tag.getDoubleAt(3), aabb_tag.getDoubleAt(4), aabb_tag.getDoubleAt(5));
+
+                double deltaX = ((aabb.minX + aabb.maxX) / 2.0D) - this.posX;
+                double deltaY = aabb.minY - this.posY;
+                double deltaZ = ((aabb.minZ + aabb.maxZ) / 2.0D) - this.posZ;
+
+                // If the position and AABB center point are > 0.1 blocks apart then do not restore the AABB. In vanilla
+                // this should never happen, but mods might not be aware that the AABB is stored and that the entity
+                // position will be reset to it. A good example of this is the ExtraUtils2 golden lasso.
+                if (((deltaX * deltaX) + (deltaY * deltaY) + (deltaZ * deltaZ)) < 0.01D)
+                {
+                    this.setEntityBoundingBox(aabb);
+                }
+            }
+            if (this instanceof EntityLivingBase) {
+                EntityLivingBase entity = (EntityLivingBase) this;
+                this.ticksExisted = compound.getInteger("Spigot.ticksLived");
+                // Reset the persistence for tamed animals
+                if (entity instanceof EntityTameable && !isLevelAtLeast(compound, 2) && !compound.getBoolean("PersistenceRequired")) {
+                    EntityLiving entityliving = (EntityLiving) entity;
+                    entityliving.persistenceRequired = !entityliving.canDespawn();
+                }
+            }
+            double limit = getBukkitEntity() instanceof Vehicle ? 100.0D : 10.0D;
+            if (Math.abs(this.motionX) > limit) {
+                this.motionX = 0.0D;
+            }
+
+            if (Math.abs(this.motionY) > limit) {
+                this.motionY = 0.0D;
+            }
+
+            if (Math.abs(this.motionZ) > limit) {
+                this.motionZ = 0.0D;
+            }
+
+            // Reset world
+            if (this instanceof EntityPlayerMP) {
+                Server server = Bukkit.getServer();
+                org.bukkit.World bworld = null;
+
+                // TODO: Remove World related checks, replaced with WorldUID
+                String worldName = compound.getString("world");
+
+                if (compound.hasKey("WorldUUIDMost") && compound.hasKey("WorldUUIDLeast")) {
+                    UUID uid = new UUID(compound.getLong("WorldUUIDMost"), compound.getLong("WorldUUIDLeast"));
+                    bworld = server.getWorld(uid);
+                } else {
+                    bworld = server.getWorld(worldName);
+                }
+
+                if (bworld == null) {
+                    EntityPlayerMP entityPlayer = (EntityPlayerMP) this;
+                    // Cauldron start - use CraftBukkit's fallback world code if no valid world is found.
+                    entityPlayer.setWorld(MinecraftServer.getServerInst().getWorldServer(entityPlayer.dimension));
+                }
+                else {
+                    this.setWorld(((CraftWorld) bworld).getHandle());
+                    // Cauldron end
+                }
+            }
         }
         catch (Throwable throwable)
         {
@@ -1861,7 +2662,7 @@
     }
 
     @Nullable
-    protected final String getEntityString()
+    public final String getEntityString()
     {
         ResourceLocation resourcelocation = EntityList.getKey(this);
         return resourcelocation == null ? null : resourcelocation.toString();
@@ -1918,7 +2719,10 @@
         {
             EntityItem entityitem = new EntityItem(this.world, this.posX, this.posY + (double)offsetY, this.posZ, stack);
             entityitem.setDefaultPickupDelay();
-            this.world.spawnEntity(entityitem);
+            if (captureDrops)
+                this.capturedDrops.add(entityitem);
+            else
+                this.world.spawnEntity(entityitem);
             return entityitem;
         }
     }
@@ -1985,6 +2789,7 @@
             this.motionX = 0.0D;
             this.motionY = 0.0D;
             this.motionZ = 0.0D;
+            if(!updateBlocked)
             this.onUpdate();
 
             if (this.isRiding())
@@ -2032,6 +2837,7 @@
             }
         }
 
+        if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entityIn, true)) return false;
         if (force || this.canBeRidden(entityIn) && entityIn.canFitPassenger(this))
         {
             if (this.isRiding())
@@ -2067,6 +2873,7 @@
         if (this.ridingEntity != null)
         {
             Entity entity = this.ridingEntity;
+            if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entity, false)) return;
             this.ridingEntity = null;
             entity.removePassenger(this);
         }
@@ -2080,6 +2887,28 @@
         }
         else
         {
+            com.google.common.base.Preconditions.checkState(!passenger.riddenByEntities.contains(this), "Circular entity riding! %s %s", this, passenger);
+             CraftEntity craft = (CraftEntity) passenger.getBukkitEntity().getVehicle();
+            Entity orig = craft == null ? null : craft.getHandle();
+            if (getBukkitEntity() instanceof Vehicle && passenger.getBukkitEntity() instanceof LivingEntity && passenger.world.isChunkLoaded((int) passenger.posX >> 4, (int) passenger.posZ >> 4, false)) { // Boolean not used
+                VehicleEnterEvent event = new VehicleEnterEvent(
+                        (Vehicle) getBukkitEntity(),
+                        passenger.getBukkitEntity()
+                );
+                Bukkit.getPluginManager().callEvent(event);
+                CraftEntity craftn = (CraftEntity) passenger.getBukkitEntity().getVehicle();
+                Entity n = craftn == null ? null : craftn.getHandle();
+                if (event.isCancelled() || n != orig) {
+                    return;
+                }
+            }
+            // Spigot start
+            org.spigotmc.event.entity.EntityMountEvent event = new org.spigotmc.event.entity.EntityMountEvent(passenger.getBukkitEntity(), this.getBukkitEntity());
+            Bukkit.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return;
+            }
+            // Spigot end
             if (!this.world.isRemote && passenger instanceof EntityPlayer && !(this.getControllingPassenger() instanceof EntityPlayer))
             {
                 this.riddenByEntities.add(0, passenger);
@@ -2099,6 +2928,27 @@
         }
         else
         {
+            passenger.setVehicle(this); // Paper - Set the vehicle back for the event
+            CraftEntity craft = (CraftEntity) passenger.getBukkitEntity().getVehicle();
+            Entity orig = craft == null ? null : craft.getHandle();
+            if (getBukkitEntity() instanceof Vehicle && passenger.getBukkitEntity() instanceof LivingEntity) {
+                VehicleExitEvent event = new VehicleExitEvent(
+                        (Vehicle) getBukkitEntity(),
+                        (LivingEntity) passenger.getBukkitEntity()
+                );
+                Bukkit.getPluginManager().callEvent(event);
+                CraftEntity craftn = (CraftEntity) passenger.getBukkitEntity().getVehicle();
+                Entity n = craftn == null ? null : craftn.getHandle();
+                if (event.isCancelled() || n != orig) {
+                    return;
+                }
+            }
+            // Paper start - make EntityDismountEvent cancellable
+            if (!new org.spigotmc.event.entity.EntityDismountEvent(passenger.getBukkitEntity(), this.getBukkitEntity()).callEvent()) {
+                return;
+            }
+            passenger.setVehicle(null);
+            // Paper end
             this.riddenByEntities.remove(passenger);
             passenger.rideCooldown = 60;
         }
@@ -2295,12 +3145,12 @@
         this.setFlag(5, invisible);
     }
 
-    protected boolean getFlag(int flag)
+    public boolean getFlag(int flag)
     {
         return (((Byte)this.dataManager.get(FLAGS)).byteValue() & 1 << flag) != 0;
     }
 
-    protected void setFlag(int flag, boolean set)
+    public void setFlag(int flag, boolean set)
     {
         byte b0 = ((Byte)this.dataManager.get(FLAGS)).byteValue();
 
@@ -2321,17 +3171,57 @@
 
     public void setAir(int air)
     {
-        this.dataManager.set(AIR, Integer.valueOf(air));
+
+
+        //this.dataManager.set(AIR, Integer.valueOf(air));
+        EntityAirChangeEvent event = new EntityAirChangeEvent(this.getBukkitEntity(), air);
+        event.getEntity().getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return;
+        }
+
+
+        this.dataManager.set(Entity.AIR, event.getAmount());
+
     }
 
     public void onStruckByLightning(EntityLightningBolt lightningBolt)
     {
+        if (lightningBolt == null) lightningBolt = new EntityLightningBolt(this.world, this.posX, this.posY, this.posZ, true);
+        final org.bukkit.entity.Entity thisBukkitEntity = this.getBukkitEntity();
+        final org.bukkit.entity.Entity stormBukkitEntity = lightningBolt.getBukkitEntity();
+        final PluginManager pluginManager = Bukkit.getPluginManager();
+
+        if (thisBukkitEntity instanceof Hanging) {
+            HangingBreakByEntityEvent hangingEvent = new HangingBreakByEntityEvent((Hanging) thisBukkitEntity, stormBukkitEntity);
+            pluginManager.callEvent(hangingEvent);
+
+            if (hangingEvent.isCancelled()) {
+                return;
+            }
+        }
+
+        if (this.isImmuneToFire) {
+            return;
+        }
+        CraftEventFactory.entityDamage = lightningBolt;
+        if (!this.attackEntityFrom(DamageSource.LIGHTNING_BOLT, 5.0F)) {
+            CraftEventFactory.entityDamage = null;
+            return;
+        }
         this.attackEntityFrom(DamageSource.LIGHTNING_BOLT, 5.0F);
         ++this.fire;
 
         if (this.fire == 0)
         {
-            this.setFire(8);
+            // this.setFire(8);
+            // CraftBukkit start - Call a combust event when lightning strikes
+            EntityCombustByEntityEvent entityCombustEvent = new EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8);
+            pluginManager.callEvent(entityCombustEvent);
+            if (!entityCombustEvent.isCancelled()) {
+                this.setFire(entityCombustEvent.getDuration());
+            }
+            // CraftBukkit end
         }
     }
 
@@ -2472,7 +3362,7 @@
 
     public String toString()
     {
-        return String.format("%s['%s'/%d, l='%s', x=%.2f, y=%.2f, z=%.2f]", this.getClass().getSimpleName(), this.getName(), this.entityId, this.world == null ? "~NULL~" : this.world.getWorldInfo().getWorldName(), this.posX, this.posY, this.posZ);
+        return String.format("%s[\'%s\'/%d, uuid=\'%s\', l=\'%s\', x=%.2f, y=%.2f, z=%.2f, cx=%d, cd=%d, tl=%d, v=%b, d=%b]", new Object[] { this.getClass().getSimpleName(), this.getName(), Integer.valueOf(this.entityId), this.getUniqueID().toString(), this.world == null ? "~NULL~" : this.world.getWorldInfo().getWorldName(), Double.valueOf(this.posX), Double.valueOf(this.posY), Double.valueOf(this.posZ), chunkCoordX, chunkCoordZ, this.ticksExisted, this.valid, this.isDead}); // Paper - add more information
     }
 
     public boolean isEntityInvulnerable(DamageSource source)
@@ -2509,57 +3399,62 @@
     @Nullable
     public Entity changeDimension(int dimensionIn)
     {
+        if (this.world.isRemote || this.isDead) return null;
+        return changeDimension(dimensionIn, this.getServer().getWorldServer(dimensionIn).getDefaultTeleporter());
+    }
+
+    @Nullable // Forge: Entities that require custom handling should override this method, not the other
+    public Entity changeDimension(int dimensionIn, net.minecraftforge.common.util.ITeleporter teleporter)
+    {
         if (!this.world.isRemote && !this.isDead)
         {
+            if (!net.minecraftforge.common.ForgeHooks.onTravelToDimension(this, dimensionIn)) return null;
             this.world.profiler.startSection("changeDimension");
             MinecraftServer minecraftserver = this.getServer();
-            int i = this.dimension;
-            WorldServer worldserver = minecraftserver.getWorld(i);
-            WorldServer worldserver1 = minecraftserver.getWorld(dimensionIn);
-            this.dimension = dimensionIn;
+            // CraftBukkit start - Move logic into new function "teleportTo(Location,boolean)"
+            // int i = this.dimension;
+            // WorldServer worldserver = minecraftserver.getWorld(i);
+            // WorldServer worldserver1 = minecraftserver.getWorld(dimensionIn);
+            // Cauldron start - Allow Forge hotloading on teleport
+			WorldServer exitWorld = minecraftserver.getWorldServer(dimensionIn);
 
-            if (i == 1 && dimensionIn == 1)
-            {
-                worldserver1 = minecraftserver.getWorld(0);
-                this.dimension = 0;
-            }
+            Location enter = this.getBukkitEntity().getLocation();
+            Location exit = exitWorld != null ? minecraftserver.getPlayerList().calculateTarget(enter, minecraftserver.getWorldServer(dimensionIn)) : null;
+            boolean useTravelAgent = exitWorld != null && !(this.dimension == 1 && exitWorld.dimension == 1); // don't use agent for custom worlds or return from THE_END
 
-            this.world.removeEntity(this);
-            this.isDead = false;
-            this.world.profiler.startSection("reposition");
-            BlockPos blockpos;
+            TravelAgent agent = exit != null ? (TravelAgent) ((CraftWorld) exit.getWorld()).getHandle().getDefaultTeleporter() : org.bukkit.craftbukkit.v1_12_R1.CraftTravelAgent.DEFAULT; // return arbitrary TA to compensate for implementation dependent plugins
+            // Cauldron end
+            boolean oldCanCreate = agent.getCanCreatePortal();
+            agent.setCanCreatePortal(false); // General entities cannot create portals
 
-            if (dimensionIn == 1)
-            {
-                blockpos = worldserver1.getSpawnCoordinate();
+            EntityPortalEvent event = new EntityPortalEvent(this.getBukkitEntity(), enter, exit, agent);
+            event.useTravelAgent(useTravelAgent);
+            event.getEntity().getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !this.isEntityAlive()) {
+                agent.setCanCreatePortal(oldCanCreate);
+                return null;
             }
-            else
-            {
-                double d0 = this.posX;
-                double d1 = this.posZ;
-                double d2 = 8.0D;
+            exit = event.useTravelAgent() ? event.getPortalTravelAgent().findOrCreate(event.getTo()) : event.getTo();
+            agent.setCanCreatePortal(oldCanCreate);
 
-                if (dimensionIn == -1)
-                {
-                    d0 = MathHelper.clamp(d0 / 8.0D, worldserver1.getWorldBorder().minX() + 16.0D, worldserver1.getWorldBorder().maxX() - 16.0D);
-                    d1 = MathHelper.clamp(d1 / 8.0D, worldserver1.getWorldBorder().minZ() + 16.0D, worldserver1.getWorldBorder().maxZ() - 16.0D);
-                }
-                else if (dimensionIn == 0)
-                {
-                    d0 = MathHelper.clamp(d0 * 8.0D, worldserver1.getWorldBorder().minX() + 16.0D, worldserver1.getWorldBorder().maxX() - 16.0D);
-                    d1 = MathHelper.clamp(d1 * 8.0D, worldserver1.getWorldBorder().minZ() + 16.0D, worldserver1.getWorldBorder().maxZ() - 16.0D);
-                }
+            // Need to make sure the profiler state is reset afterwards (but we still want to time the call)
+            Entity entity = this.teleportTo(exit, true);
+            this.world.profiler.endSection();
+            return entity;
+        }
+        return null;
+    }
 
-                d0 = (double)MathHelper.clamp((int)d0, -29999872, 29999872);
-                d1 = (double)MathHelper.clamp((int)d1, -29999872, 29999872);
-                float f = this.rotationYaw;
-                this.setLocationAndAngles(d0, this.posY, d1, 90.0F, 0.0F);
-                Teleporter teleporter = worldserver1.getDefaultTeleporter();
-                teleporter.placeInExistingPortal(this, f);
-                blockpos = new BlockPos(this);
-            }
-
-            worldserver.updateEntityWithOptionalForce(this, false);
+    public Entity teleportTo(Location exit, boolean portal) {
+        if (true) { // Paper
+            WorldServer worldserver = ((CraftWorld) getBukkitEntity().getLocation().getWorld()).getHandle();
+            WorldServer worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
+            int i = worldserver1.dimension;
+            this.dimension = i;
+            this.world.removeEntity(this); // Paper - Fully remove entity, can't have dupes in the UUID map
+            this.isDead = false;
+            this.world.profiler.startSection("reposition");
+            worldserver1.getMinecraftServer().getPlayerList().repositionEntity(this, exit, portal);
             this.world.profiler.endStartSection("reloading");
             Entity entity = EntityList.newEntity(this.getClass(), worldserver1);
 
@@ -2567,28 +3462,26 @@
             {
                 entity.copyDataFromOld(this);
 
-                if (i == 1 && dimensionIn == 1)
-                {
-                    BlockPos blockpos1 = worldserver1.getTopSolidOrLiquidBlock(worldserver1.getSpawnPoint());
-                    entity.moveToBlockPosAndAngles(blockpos1, entity.rotationYaw, entity.rotationPitch);
-                }
-                else
-                {
-                    entity.moveToBlockPosAndAngles(blockpos, entity.rotationYaw, entity.rotationPitch);
-                }
-
                 boolean flag = entity.forceSpawn;
                 entity.forceSpawn = true;
                 worldserver1.spawnEntity(entity);
                 entity.forceSpawn = flag;
                 worldserver1.updateEntityWithOptionalForce(entity, false);
+                // CraftBukkit start - Forward the CraftEntity to the new entity
+                this.getBukkitEntity().setHandle(entity);
+                entity.bukkitEntity = this.getBukkitEntity();
+
+                if (this instanceof EntityLiving) {
+                    ((EntityLiving) this).clearLeashed(true, false); // Unleash to prevent duping of leads.
+                }
+                // CraftBukkit end
             }
 
             this.isDead = true;
             this.world.profiler.endSection();
             worldserver.resetUpdateEntityTick();
             worldserver1.resetUpdateEntityTick();
-            this.world.profiler.endSection();
+            // this.world.profiler.endSection(); // CraftBukkit: Moved up to keep balanced
             return entity;
         }
         else
@@ -2604,7 +3497,7 @@
 
     public float getExplosionResistance(Explosion explosionIn, World worldIn, BlockPos pos, IBlockState blockStateIn)
     {
-        return blockStateIn.getBlock().getExplosionResistance(this);
+        return blockStateIn.getBlock().getExplosionResistance(worldIn, pos, this, explosionIn);
     }
 
     public boolean canExplosionDestroyBlock(Explosion explosionIn, World worldIn, BlockPos pos, IBlockState blockStateIn, float p_174816_5_)
@@ -2717,6 +3610,11 @@
 
     public void setCustomNameTag(String name)
     {
+        // CraftBukkit start - Add a sane limit for name length
+        if (name.length() > 256) {
+            name = name.substring(0, 256);
+        }
+        // CraftBukkit end
         this.dataManager.set(CUSTOM_NAME, name);
     }
 
@@ -2800,7 +3698,25 @@
 
     public void setEntityBoundingBox(AxisAlignedBB bb)
     {
-        this.boundingBox = bb;
+//        this.boundingBox = bb;
+        double a = bb.minX,
+                b = bb.minY,
+                c = bb.minZ,
+                d = bb.maxX,
+                e = bb.maxY,
+                f = bb.maxZ;
+        double len = bb.maxX - bb.minX;
+        if (len < 0) d = a;
+        if (len > 64) d = a + 64.0;
+
+        len = bb.maxY - bb.minY;
+        if (len < 0) e = b;
+        if (len > 64) e = b + 64.0;
+
+        len = bb.maxZ - bb.minZ;
+        if (len < 0) f = c;
+        if (len > 64) f = c + 64.0;
+        this.boundingBox = new AxisAlignedBB(a, b, c, d, e, f);
     }
 
     public float getEyeHeight()
@@ -2832,6 +3748,11 @@
         return true;
     }
 
+    public boolean canUseCommand(int permLevel, String commandName, String perm)
+    {
+        return true;
+    }
+
     public BlockPos getPosition()
     {
         return new BlockPos(this.posX, this.posY + 0.5D, this.posZ);
@@ -2859,11 +3780,11 @@
 
     public void setCommandStat(CommandResultStats.Type type, int amount)
     {
-        if (this.world != null && !this.world.isRemote)
-        {
-            this.cmdResultStats.setCommandStatForSender(this.world.getMinecraftServer(), this, type, amount);
-        }
+    if (this.world != null && !this.world.isRemote)
+    {
+        this.cmdResultStats.setCommandStatForSender(this.world.getMinecraftServer(), this, type, amount);
     }
+}
 
     @Nullable
     public MinecraftServer getServer()
@@ -2901,6 +3822,217 @@
         EnchantmentHelper.applyArthropodEnchantments(entityLivingBaseIn, entityIn);
     }
 
+    /* ================================== Forge Start =====================================*/
+    /**
+     * Internal use for keeping track of entities that are tracked by a world, to
+     * allow guarantees that entity position changes will force a chunk load, avoiding
+     * potential issues with entity desyncing and bad chunk data.
+     */
+    private boolean isAddedToWorld;
+
+    /**
+     * Gets whether this entity has been added to a world (for tracking). Specifically
+     * between the times when an entity is added to a world and the entity being removed
+     * from the world's tracked lists. See {@link World#onEntityAdded(Entity)} and
+     * {@link World#onEntityRemoved(Entity)}.
+     *
+     * @return True if this entity is being tracked by a world
+     */
+    public final boolean isAddedToWorld() { return this.isAddedToWorld; }
+
+    /**
+     * Called after the entity has been added to the world's
+     * ticking list. Can be overriden, but needs to call super
+     * to prevent MC-136995.
+     */
+    public void onAddedToWorld() {
+        this.isAddedToWorld = true;
+    }
+
+    /**
+     * Called after the entity has been removed to the world's
+     * ticking list. Can be overriden, but needs to call super
+     * to prevent MC-136995.
+     */
+    public void onRemovedFromWorld() {
+        this.isAddedToWorld = false;
+    }
+    /**
+     * Returns a NBTTagCompound that can be used to store custom data for this entity.
+     * It will be written, and read from disc, so it persists over world saves.
+     * @return A NBTTagCompound
+     */
+    public NBTTagCompound getEntityData()
+    {
+        if (customEntityData == null)
+        {
+            customEntityData = new NBTTagCompound();
+        }
+        return customEntityData;
+    }
+
+    /**
+     * Used in model rendering to determine if the entity riding this entity should be in the 'sitting' position.
+     * @return false to prevent an entity that is mounted to this entity from displaying the 'sitting' animation.
+     */
+    public boolean shouldRiderSit()
+    {
+        return true;
+    }
+
+    /**
+     * Called when a user uses the creative pick block button on this entity.
+     *
+     * @param target The full target the player is looking at
+     * @return A ItemStack to add to the player's inventory, empty ItemStack if nothing should be added.
+     */
+    public ItemStack getPickedResult(RayTraceResult target)
+    {
+        if (this instanceof net.minecraft.entity.item.EntityPainting)
+        {
+            return new ItemStack(net.minecraft.init.Items.PAINTING);
+        }
+        else if (this instanceof EntityLeashKnot)
+        {
+            return new ItemStack(net.minecraft.init.Items.LEAD);
+        }
+        else if (this instanceof net.minecraft.entity.item.EntityItemFrame)
+        {
+            ItemStack held = ((net.minecraft.entity.item.EntityItemFrame)this).getDisplayedItem();
+            if (held.isEmpty())
+            {
+                return new ItemStack(net.minecraft.init.Items.ITEM_FRAME);
+            }
+            else
+            {
+                return held.copy();
+            }
+        }
+        else if (this instanceof net.minecraft.entity.item.EntityMinecart)
+        {
+            return ((net.minecraft.entity.item.EntityMinecart)this).getCartItem();
+        }
+        else if (this instanceof EntityBoat)
+        {
+            return new ItemStack(((EntityBoat)this).getItemBoat());
+        }
+        else if (this instanceof net.minecraft.entity.item.EntityArmorStand)
+        {
+            return new ItemStack(net.minecraft.init.Items.ARMOR_STAND);
+        }
+        else if (this instanceof net.minecraft.entity.item.EntityEnderCrystal)
+        {
+            return new ItemStack(net.minecraft.init.Items.END_CRYSTAL);
+        }
+        else
+        {
+            ResourceLocation name = EntityList.getKey(this);
+            if (name != null && EntityList.ENTITY_EGGS.containsKey(name))
+            {
+                ItemStack stack = new ItemStack(net.minecraft.init.Items.SPAWN_EGG);
+                net.minecraft.item.ItemMonsterPlacer.applyEntityIdToItemStack(stack, name);
+                return stack;
+            }
+        }
+        return ItemStack.EMPTY;
+    }
+
+    public UUID getPersistentID()
+    {
+        return entityUniqueID;
+    }
+
+    /**
+     * Reset the entity ID to a new value. Not to be used from Mod code
+     */
+    @Deprecated // TODO: remove (1.13?)
+    public final void resetEntityId()
+    {
+        this.entityId = nextEntityID++;
+    }
+
+    public boolean shouldRenderInPass(int pass)
+    {
+        return pass == 0;
+    }
+
+    /**
+     * Returns true if the entity is of the @link{EnumCreatureType} provided
+     * @param type The EnumCreatureType type this entity is evaluating
+     * @param forSpawnCount If this is being invoked to check spawn count caps.
+     * @return If the creature is of the type provided
+     */
+    public boolean isCreatureType(EnumCreatureType type, boolean forSpawnCount)
+    {
+        if (forSpawnCount && (this instanceof EntityLiving) && ((EntityLiving)this).isNoDespawnRequired()) return false;
+        return type.getCreatureClass().isAssignableFrom(this.getClass());
+    }
+
+    /**
+     * If a rider of this entity can interact with this entity. Should return true on the
+     * ridden entity if so.
+     *
+     * @return if the entity can be interacted with from a rider
+     */
+    public boolean canRiderInteract()
+    {
+        return false;
+    }
+
+    /**
+     * If the rider should be dismounted from the entity when the entity goes under water
+     *
+     * @param rider The entity that is riding
+     * @return if the entity should be dismounted when under water
+     */
+    public boolean shouldDismountInWater(Entity rider)
+    {
+        return this instanceof EntityLivingBase;
+    }
+
+    @Override
+    public boolean hasCapability(net.minecraftforge.common.capabilities.Capability<?> capability, @Nullable EnumFacing facing)
+    {
+        return capabilities != null && capabilities.hasCapability(capability, facing);
+    }
+
+    @Override
+    @Nullable
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable EnumFacing facing)
+    {
+        return capabilities == null ? null : capabilities.getCapability(capability, facing);
+    }
+
+    public void deserializeNBT(NBTTagCompound nbt)
+    {
+        this.readFromNBT(nbt);
+    }
+
+    public NBTTagCompound serializeNBT()
+    {
+        NBTTagCompound ret = new NBTTagCompound();
+        ret.setString("id", this.getEntityString());
+        return this.writeToNBT(ret);
+    }
+
+    /**
+     * Checks if this {@link Entity} can trample a {@link Block}.
+     *
+     * @param world The world in which the block will be trampled
+     * @param block The block being tested
+     * @param pos The block pos
+     * @param fallDistance The fall distance
+     * @return {@code true} if this entity can trample, {@code false} otherwise
+     */
+    public boolean canTrample(World world, Block block, BlockPos pos, float fallDistance)
+    {
+        return world.rand.nextFloat() < fallDistance - 0.5F
+            && this instanceof EntityLivingBase
+            && (this instanceof EntityPlayer || net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(world, this))
+            && this.width * this.width * this.height > 0.512F;
+    }
+    /* ================================== Forge End =====================================*/
+
     public void addTrackingPlayer(EntityPlayerMP player)
     {
     }
@@ -3069,7 +4201,7 @@
         return SoundCategory.NEUTRAL;
     }
 
-    protected int getFireImmuneTicks()
+    public int getFireImmuneTicks()
     {
         return 1;
     }
