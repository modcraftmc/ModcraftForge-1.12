--- ../src-base/minecraft/net/minecraft/entity/EntityTracker.java
+++ ../src-work/minecraft/net/minecraft/entity/EntityTracker.java
@@ -2,6 +2,8 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 import net.minecraft.crash.CrashReport;
@@ -47,19 +49,20 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import red.mohist.common.async.concurent.ThreadSafeArrayList;
 
 public class EntityTracker
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private final WorldServer world;
-    private final Set<EntityTrackerEntry> entries = Sets.<EntityTrackerEntry>newHashSet();
-    private final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
+    private final ArrayList<EntityTrackerEntry> entries = new ThreadSafeArrayList<>(true);
+    public final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
     private int maxTrackingDistanceThreshold;
 
     public EntityTracker(WorldServer theWorldIn)
     {
         this.world = theWorldIn;
-        this.maxTrackingDistanceThreshold = theWorldIn.getMinecraftServer().getPlayerList().getEntityViewDistance();
+        this.maxTrackingDistanceThreshold = net.minecraft.server.management.PlayerChunkMap.getFurthestViewableBlock(theWorldIn.spigotConfig.viewDistance); // Spigot
     }
 
     public static long getPositionLong(double value)
@@ -77,6 +80,8 @@
 
     public void track(Entity entityIn)
     {
+        if (net.minecraftforge.fml.common.registry.EntityRegistry.instance().tryTrackingEntity(this, entityIn)) return;
+
         if (entityIn instanceof EntityPlayerMP)
         {
             this.track(entityIn, 512, 2);
@@ -196,7 +201,7 @@
         }
         else if (entityIn instanceof EntityAreaEffectCloud)
         {
-            this.track(entityIn, 160, Integer.MAX_VALUE, true);
+            this.track(entityIn, 160, 10 /*Integer.MAX_VALUE*/, true); // CraftBukkit
         }
         else if (entityIn instanceof EntityEnderCrystal)
         {
@@ -215,11 +220,13 @@
 
     public void track(Entity entityIn, int trackingRange, final int updateFrequency, boolean sendVelocityUpdates)
     {
+        org.spigotmc.AsyncCatcher.catchOp("entity track"); // Spigot
+        trackingRange = org.spigotmc.TrackingRange.getEntityTrackingRange(entityIn, trackingRange); // Spigot
         try
         {
             if (this.trackedEntityHashTable.containsItem(entityIn.getEntityId()))
             {
-                throw new IllegalStateException("Entity is already tracked!");
+                return;
             }
 
             EntityTrackerEntry entitytrackerentry = new EntityTrackerEntry(entityIn, trackingRange, this.maxTrackingDistanceThreshold, updateFrequency, sendVelocityUpdates);
@@ -262,6 +269,7 @@
 
     public void untrack(Entity entityIn)
     {
+        org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
         if (entityIn instanceof EntityPlayerMP)
         {
             EntityPlayerMP entityplayermp = (EntityPlayerMP)entityIn;
@@ -284,7 +292,7 @@
     public void tick()
     {
         List<EntityPlayerMP> list = Lists.<EntityPlayerMP>newArrayList();
-
+        world.timings.tracker1.startTiming(); // Spigot
         for (EntityTrackerEntry entitytrackerentry : this.entries)
         {
             entitytrackerentry.updatePlayerList(this.world.playerEntities);
@@ -299,7 +307,9 @@
                 }
             }
         }
+        world.timings.tracker1.stopTiming(); // Spigot
 
+        world.timings.tracker2.startTiming(); // Spigot
         for (int i = 0; i < list.size(); ++i)
         {
             EntityPlayerMP entityplayermp = list.get(i);
@@ -312,6 +322,7 @@
                 }
             }
         }
+        world.timings.tracker2.stopTiming(); // Spigot
     }
 
     public void updateVisibility(EntityPlayerMP player)
@@ -339,6 +350,25 @@
         }
     }
 
+    /* ======================================== FORGE START =====================================*/
+
+    // don't expose the EntityTrackerEntry directly so mods can't mess with the data in there as easily
+    /**
+     * Get all players tracking the given Entity. The Entity must be part of the World that this Tracker belongs to.
+     * @param entity the Entity
+     * @return all players tracking the Entity
+     */
+    public Set<? extends net.minecraft.entity.player.EntityPlayer> getTrackingPlayers(Entity entity)
+    {
+        EntityTrackerEntry entry = (EntityTrackerEntry) trackedEntityHashTable.lookup(entity.getEntityId());
+        if (entry == null)
+            return java.util.Collections.emptySet();
+        else
+            return java.util.Collections.unmodifiableSet(entry.trackingPlayers);
+    }
+
+    /* ======================================== FORGE END   =====================================*/
+
     public void sendToTrackingAndSelf(Entity entityIn, Packet<?> packetIn)
     {
         EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.lookup(entityIn.getEntityId());
