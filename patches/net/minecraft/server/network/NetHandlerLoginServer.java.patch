--- ../src-base/minecraft/net/minecraft/server/network/NetHandlerLoginServer.java
+++ ../src-work/minecraft/net/minecraft/server/network/NetHandlerLoginServer.java
@@ -1,5 +1,7 @@
 package net.minecraft.server.network;
 
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
 import io.netty.channel.ChannelFuture;
@@ -29,10 +31,15 @@
 import net.minecraft.util.CryptManager;
 import net.minecraft.util.ITickable;
 import net.minecraft.util.text.ITextComponent;
+import net.minecraft.util.text.TextComponentString;
 import net.minecraft.util.text.TextComponentTranslation;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.v1_12_R1.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent;
+import red.mohist.util.i18n.Message;
 
 public class NetHandlerLoginServer implements INetHandlerLoginServer, ITickable
 {
@@ -42,13 +49,15 @@
     private final byte[] verifyToken = new byte[4];
     private final MinecraftServer server;
     public final NetworkManager networkManager;
-    private NetHandlerLoginServer.LoginState currentLoginState = NetHandlerLoginServer.LoginState.HELLO;
+    private LoginState currentLoginState = LoginState.HELLO;
     private int connectionTimer;
     private GameProfile loginGameProfile;
     private final String serverId = "";
     private SecretKey secretKey;
     private EntityPlayerMP player;
 
+    public String hostname = "";
+
     public NetHandlerLoginServer(MinecraftServer serverIn, NetworkManager networkManagerIn)
     {
         this.server = serverIn;
@@ -58,18 +67,22 @@
 
     public void update()
     {
-        if (this.currentLoginState == NetHandlerLoginServer.LoginState.READY_TO_ACCEPT)
+        if (this.currentLoginState == LoginState.READY_TO_ACCEPT)
         {
-            this.tryAcceptPlayer();
+            // Paper start - prevent logins to be processed even though disconnect was called
+            if (networkManager.isChannelOpen()) {
+                this.tryAcceptPlayer();
+            }
+            // Paper end
         }
-        else if (this.currentLoginState == NetHandlerLoginServer.LoginState.DELAY_ACCEPT)
+        else if (this.currentLoginState == LoginState.DELAY_ACCEPT)
         {
             EntityPlayerMP entityplayermp = this.server.getPlayerList().getPlayerByUUID(this.loginGameProfile.getId());
 
             if (entityplayermp == null)
             {
-                this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
-                this.server.getPlayerList().initializeConnectionToPlayer(this.networkManager, this.player);
+                this.currentLoginState = LoginState.READY_TO_ACCEPT;
+                net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.fmlServerHandshake(this.server.getPlayerList(), this.networkManager, this.player);
                 this.player = null;
             }
         }
@@ -80,6 +93,19 @@
         }
     }
 
+    // CraftBukkit start
+    @Deprecated
+    public void disconnect(String s) {
+        try {
+            ITextComponent ichatbasecomponent = new TextComponentTranslation(s);
+            this.networkManager.sendPacket(new SPacketDisconnect(ichatbasecomponent));
+            this.networkManager.closeChannel(ichatbasecomponent);
+        } catch (Exception exception) {
+            NetHandlerLoginServer.LOGGER.error("Error whilst disconnecting player", exception);
+        }
+    }
+    // CraftBukkit end
+
     public void disconnect(ITextComponent reason)
     {
         try
@@ -94,22 +120,43 @@
         }
     }
 
-    public void tryAcceptPlayer()
+    // Spigot start
+    public void initUUID()
     {
-        if (!this.loginGameProfile.isComplete())
+        UUID uuid;
+        if ( networkManager.spoofedUUID != null )
         {
-            this.loginGameProfile = this.getOfflineProfile(this.loginGameProfile);
+            uuid = networkManager.spoofedUUID;
+        } else
+        {
+            uuid = UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + this.loginGameProfile.getName() ).getBytes( StandardCharsets.UTF_8 ) );
         }
 
-        String s = this.server.getPlayerList().allowUserToConnect(this.networkManager.getRemoteAddress(), this.loginGameProfile);
+        this.loginGameProfile = new GameProfile( uuid, this.loginGameProfile.getName() );
 
-        if (s != null)
+        if (networkManager.spoofedProfile != null)
         {
-            this.disconnect(new TextComponentTranslation(s, new Object[0]));
+            for ( com.mojang.authlib.properties.Property property : networkManager.spoofedProfile )
+            {
+                this.loginGameProfile.getProperties().put( property.getName(), property );
+            }
         }
+    }
+    // Spigot end
+
+    public void tryAcceptPlayer()
+    {
+        // String s = this.server.getPlayerList().allowUserToConnect(this.networkManager.getRemoteAddress(), this.loginGameProfile);
+        // CraftBukkit start - fire PlayerLoginEvent
+        EntityPlayerMP s = this.server.getPlayerList().allowUserToConnect(this, this.loginGameProfile, hostname);
+
+        if (s == null)
+        {
+            // this.disconnect(new TextComponentTranslation(s, new Object[0]));
+        }
         else
         {
-            this.currentLoginState = NetHandlerLoginServer.LoginState.ACCEPTED;
+            this.currentLoginState = LoginState.ACCEPTED;
 
             if (this.server.getNetworkCompressionThreshold() >= 0 && !this.networkManager.isLocalChannel())
             {
@@ -127,19 +174,19 @@
 
             if (entityplayermp != null)
             {
-                this.currentLoginState = NetHandlerLoginServer.LoginState.DELAY_ACCEPT;
-                this.player = this.server.getPlayerList().createPlayerForUser(this.loginGameProfile);
+                this.currentLoginState = LoginState.DELAY_ACCEPT;
+                this.player = this.server.getPlayerList().createPlayerForUser(this.loginGameProfile, s);
             }
             else
             {
-                this.server.getPlayerList().initializeConnectionToPlayer(this.networkManager, this.server.getPlayerList().createPlayerForUser(this.loginGameProfile));
+                net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.fmlServerHandshake(this.server.getPlayerList(), this.networkManager, this.server.getPlayerList().createPlayerForUser(this.loginGameProfile, s));
             }
         }
     }
 
     public void onDisconnect(ITextComponent reason)
     {
-        LOGGER.info("{} lost connection: {}", this.getConnectionInfo(), reason.getUnformattedText());
+        LOGGER.info(Message.getString("server.connect.lost_connection"), this.getConnectionInfo(), reason.getUnformattedText());
     }
 
     public String getConnectionInfo()
@@ -149,23 +196,35 @@
 
     public void processLoginStart(CPacketLoginStart packetIn)
     {
-        Validate.validState(this.currentLoginState == NetHandlerLoginServer.LoginState.HELLO, "Unexpected hello packet");
+        Validate.validState(this.currentLoginState == LoginState.HELLO, "Unexpected hello packet");
         this.loginGameProfile = packetIn.getProfile();
 
         if (this.server.isServerInOnlineMode() && !this.networkManager.isLocalChannel())
         {
-            this.currentLoginState = NetHandlerLoginServer.LoginState.KEY;
+            this.currentLoginState = LoginState.KEY;
             this.networkManager.sendPacket(new SPacketEncryptionRequest("", this.server.getKeyPair().getPublic(), this.verifyToken));
         }
         else
         {
-            this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+            // Spigot start
+            new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, "User Authenticator #" + NetHandlerLoginServer.AUTHENTICATOR_THREAD_ID.incrementAndGet()) {
+                @Override
+                public void run() {
+                    try {
+                        initUUID();
+                        new LoginHandler().fireEvents();
+                    } catch (Exception ex) {
+                        disconnect(new TextComponentString("Failed to verify username!"));
+                    }
+                }
+            }.start();
+            // Spigot end
         }
     }
 
     public void processEncryptionResponse(CPacketEncryptionResponse packetIn)
     {
-        Validate.validState(this.currentLoginState == NetHandlerLoginServer.LoginState.KEY, "Unexpected key packet");
+        Validate.validState(this.currentLoginState == LoginState.KEY, "Unexpected key packet");
         PrivateKey privatekey = this.server.getKeyPair().getPrivate();
 
         if (!Arrays.equals(this.verifyToken, packetIn.getVerifyToken(privatekey)))
@@ -175,9 +234,9 @@
         else
         {
             this.secretKey = packetIn.getSecretKey(privatekey);
-            this.currentLoginState = NetHandlerLoginServer.LoginState.AUTHENTICATING;
+            this.currentLoginState = LoginState.AUTHENTICATING;
             this.networkManager.enableEncryption(this.secretKey);
-            (new Thread("User Authenticator #" + AUTHENTICATOR_THREAD_ID.incrementAndGet())
+            (new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, "User Authenticator #" + AUTHENTICATOR_THREAD_ID.incrementAndGet())
             {
                 public void run()
                 {
@@ -190,14 +249,18 @@
 
                         if (NetHandlerLoginServer.this.loginGameProfile != null)
                         {
-                            NetHandlerLoginServer.LOGGER.info("UUID of player {} is {}", NetHandlerLoginServer.this.loginGameProfile.getName(), NetHandlerLoginServer.this.loginGameProfile.getId());
-                            NetHandlerLoginServer.this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+                            // CraftBukkit start - fire PlayerPreLoginEvent
+                            if (!networkManager.isChannelOpen()) {
+                                return;
+                            }
+
+                            new LoginHandler().fireEvents();
                         }
                         else if (NetHandlerLoginServer.this.server.isSinglePlayer())
                         {
                             NetHandlerLoginServer.LOGGER.warn("Failed to verify username but will let them in anyway!");
                             NetHandlerLoginServer.this.loginGameProfile = NetHandlerLoginServer.this.getOfflineProfile(gameprofile);
-                            NetHandlerLoginServer.this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+                            NetHandlerLoginServer.this.currentLoginState = LoginState.READY_TO_ACCEPT;
                         }
                         else
                         {
@@ -211,13 +274,17 @@
                         {
                             NetHandlerLoginServer.LOGGER.warn("Authentication servers are down but will let them in anyway!");
                             NetHandlerLoginServer.this.loginGameProfile = NetHandlerLoginServer.this.getOfflineProfile(gameprofile);
-                            NetHandlerLoginServer.this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+                            NetHandlerLoginServer.this.currentLoginState = LoginState.READY_TO_ACCEPT;
                         }
                         else
                         {
                             NetHandlerLoginServer.this.disconnect(new TextComponentTranslation("multiplayer.disconnect.authservers_down", new Object[0]));
-                            NetHandlerLoginServer.LOGGER.error("Couldn't verify username because servers are unavailable");
                         }
+                        // CraftBukkit start - catch all exceptions
+                    } catch (Exception exception) {
+                        disconnect(new TextComponentTranslation("Failed to verify username!"));
+                        //
+                        // CraftBukkit end
                     }
                 }
                 @Nullable
@@ -230,6 +297,55 @@
         }
     }
 
+    // Spigot start
+    public class LoginHandler {
+        public void fireEvents() throws Exception {
+            String playerName = loginGameProfile.getName();
+            java.net.InetAddress address = ((java.net.InetSocketAddress) networkManager.getRemoteAddress()).getAddress();
+            java.util.UUID uniqueId = loginGameProfile.getId();
+            final org.bukkit.craftbukkit.v1_12_R1.CraftServer server = NetHandlerLoginServer.this.server.server;
+
+            // Paper start
+            PlayerProfile profile = CraftPlayerProfile.asBukkitMirror(loginGameProfile);
+            AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId, profile);
+            server.getPluginManager().callEvent(asyncEvent);
+            profile = asyncEvent.getPlayerProfile();
+            profile.complete(true);
+            loginGameProfile = CraftPlayerProfile.asAuthlibCopy(profile);
+            playerName = loginGameProfile.getName();
+            uniqueId = loginGameProfile.getId();
+            // Paper end
+
+            if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+                if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+                    event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+                }
+                Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+                    @Override
+                    protected PlayerPreLoginEvent.Result evaluate() {
+                        server.getPluginManager().callEvent(event);
+                        return event.getResult();
+                    }};
+
+                    NetHandlerLoginServer.this.server.processQueue.add(waitable);
+                    if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+                        disconnect(new TextComponentString(event.getKickMessage()));
+                        return;
+                    }
+            } else {
+                if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                    disconnect(new TextComponentString(asyncEvent.getKickMessage()));
+                    return;
+                }
+            }
+            // CraftBukkit end
+            NetHandlerLoginServer.LOGGER.info(Message.getString("server.connect.uuid"), NetHandlerLoginServer.this.loginGameProfile.getName(), NetHandlerLoginServer.this.loginGameProfile.getId());
+            NetHandlerLoginServer.this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+        }
+    }
+    // Spigot end
+
     protected GameProfile getOfflineProfile(GameProfile original)
     {
         UUID uuid = UUID.nameUUIDFromBytes(("OfflinePlayer:" + original.getName()).getBytes(StandardCharsets.UTF_8));
