--- ../src-base/minecraft/net/minecraft/world/WorldServer.java
+++ ../src-work/minecraft/net/minecraft/world/WorldServer.java
@@ -14,27 +14,26 @@
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.UUID;
-import java.util.function.Predicate;
+import java.util.logging.Level;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.advancements.FunctionManager;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockEventData;
+import net.minecraft.block.BlockJukebox;
+import net.minecraft.block.BlockShulkerBox;
+import net.minecraft.block.ITileEntityProvider;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityList;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.EntityTracker;
 import net.minecraft.entity.EnumCreatureType;
-import net.minecraft.entity.INpc;
 import net.minecraft.entity.effect.EntityLightningBolt;
-import net.minecraft.entity.passive.EntityAnimal;
 import net.minecraft.entity.passive.EntitySkeletonHorse;
-import net.minecraft.entity.passive.EntityWaterMob;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
@@ -50,6 +49,30 @@
 import net.minecraft.scoreboard.ServerScoreboard;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.PlayerChunkMap;
+import net.minecraft.tileentity.TileEntity;
+import net.minecraft.tileentity.TileEntityBanner;
+import net.minecraft.tileentity.TileEntityBeacon;
+import net.minecraft.tileentity.TileEntityBed;
+import net.minecraft.tileentity.TileEntityBrewingStand;
+import net.minecraft.tileentity.TileEntityChest;
+import net.minecraft.tileentity.TileEntityCommandBlock;
+import net.minecraft.tileentity.TileEntityComparator;
+import net.minecraft.tileentity.TileEntityDaylightDetector;
+import net.minecraft.tileentity.TileEntityDispenser;
+import net.minecraft.tileentity.TileEntityDropper;
+import net.minecraft.tileentity.TileEntityEnchantmentTable;
+import net.minecraft.tileentity.TileEntityEndGateway;
+import net.minecraft.tileentity.TileEntityEndPortal;
+import net.minecraft.tileentity.TileEntityEnderChest;
+import net.minecraft.tileentity.TileEntityFlowerPot;
+import net.minecraft.tileentity.TileEntityFurnace;
+import net.minecraft.tileentity.TileEntityHopper;
+import net.minecraft.tileentity.TileEntityMobSpawner;
+import net.minecraft.tileentity.TileEntityNote;
+import net.minecraft.tileentity.TileEntityShulkerBox;
+import net.minecraft.tileentity.TileEntitySign;
+import net.minecraft.tileentity.TileEntitySkull;
+import net.minecraft.tileentity.TileEntityStructure;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.IProgressUpdate;
 import net.minecraft.util.IThreadListener;
@@ -77,16 +100,22 @@
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraft.world.storage.WorldSavedDataCallableSave;
 import net.minecraft.world.storage.loot.LootTableManager;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.WorldSpecificSaveHandler;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.weather.LightningStrikeEvent;
+import red.mohist.common.RealTimeTicking;
+import red.mohist.configuration.*;
 
-public class WorldServer extends World implements IThreadListener
+public class WorldServer extends World implements IThreadListener, RealTimeTicking
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private final MinecraftServer mcServer;
-    private final EntityTracker entityTracker;
+    public EntityTracker entityTracker;
     private final PlayerChunkMap playerChunkMap;
     private final Set<NextTickListEntry> pendingTickListEntriesHashSet = Sets.<NextTickListEntry>newHashSet();
     private final TreeSet<NextTickListEntry> pendingTickListEntriesTreeSet = new TreeSet<NextTickListEntry>();
@@ -101,50 +130,108 @@
     private int blockEventCacheIndex;
     private final List<NextTickListEntry> pendingTickListEntriesThisTick = Lists.<NextTickListEntry>newArrayList();
 
+    /** Stores the recently processed (lighting) chunks */
+    protected Set<ChunkPos> doneChunks = new java.util.HashSet<ChunkPos>();
+    public List<Teleporter> customTeleporters = new ArrayList<Teleporter>();
+
+    public final int dimension;
+
+    public WorldServer(MinecraftServer server, ISaveHandler saveHandlerIn, WorldInfo info, int dimensionId, Profiler methodprofiler, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
+        super(saveHandlerIn, info, net.minecraftforge.common.DimensionManager.createProviderFor(dimensionId), methodprofiler, false, gen, env);
+        this.pvpMode = server.isPVPEnabled();
+        info.world = this;
+        this.dimension = dimensionId;
+        this.mcServer = server;
+        this.entityTracker = new EntityTracker(this);
+        this.playerChunkMap = new PlayerChunkMap(this);
+        // Guarantee the dimension ID was not reset by the provider
+        int providerDim = this.provider.getDimension();
+        this.provider.setWorld(this);
+        this.provider.setDimension(providerDim);
+        this.chunkProvider = this.createChunkProvider();
+        this.worldTeleporter = new org.bukkit.craftbukkit.v1_12_R1.CraftTravelAgent(this); //// CraftBukkit
+        this.calculateInitialSkylight();
+        this.calculateInitialWeather();
+        this.getWorldBorder().setSize(server.getMaxWorldSize());
+        WorldServer overworld = DimensionManager.getWorld(0);
+        if (overworld != null) {
+            this.mapStorage = overworld.mapStorage;
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, overworld.saveHandler));
+        }
+        else {
+            this.mapStorage = new MapStorage(saveHandlerIn);
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, this.saveHandler));
+        }
+        net.minecraftforge.common.DimensionManager.setWorld(dimensionId, this, mcServer);
+    }
+
     public WorldServer(MinecraftServer server, ISaveHandler saveHandlerIn, WorldInfo info, int dimensionId, Profiler profilerIn)
     {
-        super(saveHandlerIn, info, DimensionType.getById(dimensionId).createDimension(), profilerIn, false);
+        super(saveHandlerIn, info, net.minecraftforge.common.DimensionManager.createProviderFor(dimensionId), profilerIn, false);
         this.mcServer = server;
         this.entityTracker = new EntityTracker(this);
         this.playerChunkMap = new PlayerChunkMap(this);
+        this.dimension = dimensionId;
+        // Guarantee the dimension ID was not reset by the provider
+        int providerDim = this.provider.getDimension();
         this.provider.setWorld(this);
+        this.provider.setDimension(providerDim);
         this.chunkProvider = this.createChunkProvider();
         this.worldTeleporter = new Teleporter(this);
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
         this.getWorldBorder().setSize(server.getMaxWorldSize());
+        WorldServer overworld = DimensionManager.getWorld(0);
+        if (overworld != null) {
+            this.mapStorage = overworld.mapStorage;
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, overworld.saveHandler));
+        }
+        else {
+            this.mapStorage = new MapStorage(saveHandlerIn);
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, this.saveHandler));
+        }
+        net.minecraftforge.common.DimensionManager.setWorld(dimensionId, this, mcServer);
     }
 
     public World init()
     {
-        this.mapStorage = new MapStorage(this.saveHandler);
         String s = VillageCollection.fileNameForProvider(this.provider);
-        VillageCollection villagecollection = (VillageCollection)this.mapStorage.getOrLoadData(VillageCollection.class, s);
-
+        VillageCollection villagecollection = (VillageCollection)this.perWorldStorage.getOrLoadData(VillageCollection.class, s);
         if (villagecollection == null)
         {
             this.villageCollection = new VillageCollection(this);
-            this.mapStorage.setData(s, this.villageCollection);
+            this.perWorldStorage.setData(s, this.villageCollection);
         }
         else
         {
             this.villageCollection = villagecollection;
             this.villageCollection.setWorldsForAll(this);
         }
+        if (getServer().getScoreboardManager() == null) { // CraftBukkit
+            this.worldScoreboard = new ServerScoreboard(this.mcServer);
+            ScoreboardSaveData scoreboardsavedata = (ScoreboardSaveData)this.mapStorage.getOrLoadData(ScoreboardSaveData.class, "scoreboard");
 
-        this.worldScoreboard = new ServerScoreboard(this.mcServer);
-        ScoreboardSaveData scoreboardsavedata = (ScoreboardSaveData)this.mapStorage.getOrLoadData(ScoreboardSaveData.class, "scoreboard");
+            if (scoreboardsavedata == null)
+            {
+                scoreboardsavedata = new ScoreboardSaveData();
+                this.mapStorage.setData("scoreboard", scoreboardsavedata);
+            }
 
-        if (scoreboardsavedata == null)
-        {
-            scoreboardsavedata = new ScoreboardSaveData();
-            this.mapStorage.setData("scoreboard", scoreboardsavedata);
+            scoreboardsavedata.setScoreboard(this.worldScoreboard);
+            ((ServerScoreboard)this.worldScoreboard).addDirtyRunnable(new WorldSavedDataCallableSave(scoreboardsavedata));
+        } else {
+            this.worldScoreboard = getServer().getScoreboardManager().getMainScoreboard().getHandle();
         }
 
-        scoreboardsavedata.setScoreboard(this.worldScoreboard);
-        ((ServerScoreboard)this.worldScoreboard).addDirtyRunnable(new WorldSavedDataCallableSave(scoreboardsavedata));
         this.lootTable = new LootTableManager(new File(new File(this.saveHandler.getWorldDirectory(), "data"), "loot_tables"));
-        this.advancementManager = new AdvancementManager(new File(new File(this.saveHandler.getWorldDirectory(), "data"), "advancements"));
+        // CraftBukkit start
+        if (this.dimension != 0) { // SPIGOT-3899 multiple worlds of advancements not supported
+            this.advancementManager = this.mcServer.getAdvancementManager();
+        }
+        if (this.advancementManager == null) {
+            this.advancementManager = new AdvancementManager(new File(new File(this.saveHandler.getWorldDirectory(), "data"), "advancements"));
+        }
+        // CraftBukkit end
         this.functionManager = new FunctionManager(new File(new File(this.saveHandler.getWorldDirectory(), "data"), "functions"), this.mcServer);
         this.getWorldBorder().setCenter(this.worldInfo.getBorderCenterX(), this.worldInfo.getBorderCenterZ());
         this.getWorldBorder().setDamageAmount(this.worldInfo.getBorderDamagePerBlock());
@@ -161,9 +248,146 @@
             this.getWorldBorder().setTransition(this.worldInfo.getBorderSize());
         }
 
+        this.initCapabilities();
         return this;
     }
 
+    @Override
+    public TileEntity getTileEntity(BlockPos pos) {
+        TileEntity result = super.getTileEntity(pos);
+        Block type = getBlockState(pos).getBlock();
+
+        if (type == Blocks.CHEST || type == Blocks.TRAPPED_CHEST) {
+            if (!(result instanceof TileEntityChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.FURNACE) {
+            if (!(result instanceof TileEntityFurnace)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.DROPPER) {
+            if (!(result instanceof TileEntityDropper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.DISPENSER) {
+            if (!(result instanceof TileEntityDispenser)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.JUKEBOX) {
+            if (!(result instanceof BlockJukebox.TileEntityJukebox)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.NOTEBLOCK) {
+            if (!(result instanceof TileEntityNote)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.MOB_SPAWNER) {
+            if (!(result instanceof TileEntityMobSpawner)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if ((type == Blocks.STANDING_SIGN) || (type == Blocks.WALL_SIGN)) {
+            if (!(result instanceof TileEntitySign)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.ENDER_CHEST) {
+            if (!(result instanceof TileEntityEnderChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.BREWING_STAND) {
+            if (!(result instanceof TileEntityBrewingStand)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.BEACON) {
+            if (!(result instanceof TileEntityBeacon)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.HOPPER) {
+            if (!(result instanceof TileEntityHopper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.ENCHANTING_TABLE) {
+            if (!(result instanceof TileEntityEnchantmentTable)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.END_PORTAL) {
+            if (!(result instanceof TileEntityEndPortal)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.SKULL) {
+            if (!(result instanceof TileEntitySkull)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.DAYLIGHT_DETECTOR || type == Blocks.DAYLIGHT_DETECTOR_INVERTED) {
+            if (!(result instanceof TileEntityDaylightDetector)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.POWERED_COMPARATOR || type == Blocks.UNPOWERED_COMPARATOR) {
+            if (!(result instanceof TileEntityComparator)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.FLOWER_POT) {
+            if (!(result instanceof TileEntityFlowerPot)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.STANDING_BANNER || type == Blocks.WALL_BANNER) {
+            if (!(result instanceof TileEntityBanner)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.STRUCTURE_BLOCK) {
+            if (!(result instanceof TileEntityStructure)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.END_GATEWAY) {
+            if (!(result instanceof TileEntityEndGateway)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.COMMAND_BLOCK) {
+            if (!(result instanceof TileEntityCommandBlock)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.STRUCTURE_BLOCK) {
+            if (!(result instanceof TileEntityStructure)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.BED) {
+            if (!(result instanceof TileEntityBed)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        }
+        // Paper Start - add TE fix checks for shulkers, see nms.BlockShulkerBox
+        else if (type instanceof BlockShulkerBox) {
+            if (!(result instanceof TileEntityShulkerBox)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        }
+        // Paper end
+
+        return result;
+    }
+
+    private TileEntity fixTileEntity(BlockPos pos, Block type, TileEntity found) {
+        this.getServer().getLogger().log(Level.SEVERE, "Block at {0},{1},{2} is {3} but has {4}" + ". "
+                + "Bukkit will attempt to fix this, but there may be additional damage that we cannot recover.", new Object[]{pos.getX(), pos.getY(), pos.getZ(), org.bukkit.Material.getBlockMaterial(Block.getIdFromBlock(type)).toString(), found});
+        if (type instanceof ITileEntityProvider) {
+            TileEntity replacement = ((ITileEntityProvider) type).createNewTileEntity(this, type.getMetaFromState(this.getBlockState(pos)));
+            replacement.world = this;
+            this.setTileEntity(pos, replacement);
+            return replacement;
+        } else {
+            this.getServer().getLogger().severe("Don't know how to fix for this type... Can't do anything! :(");
+            return found;
+        }
+    }
+
+    private boolean canSpawn(int x, int z) {
+        if (this.generator != null) {
+            return this.generator.canSpawn(this.getWorld(), x, z);
+        } else {
+            return this.provider.canCoordinateBeSpawn(x, z);
+        }
+    }
+    // CraftBukkit end
+
     public void tick()
     {
         super.tick();
@@ -188,11 +412,17 @@
 
         this.profiler.startSection("mobSpawner");
 
-        if (this.getGameRules().getBoolean("doMobSpawning") && this.worldInfo.getTerrainType() != WorldType.DEBUG_ALL_BLOCK_STATES)
+        // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
+        long time = this.worldInfo.getWorldTotalTime();
+        if (this.getGameRules().getBoolean("doMobSpawning") && this.worldInfo.getTerrainType() != WorldType.DEBUG_ALL_BLOCK_STATES && (this.spawnHostileMobs || this.spawnPeacefulMobs) && this.playerEntities.size() > 0)
         {
-            this.entitySpawner.findChunksForSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs, this.worldInfo.getWorldTotalTime() % 400L == 0L);
+            timings.mobSpawn.startTiming(); // Spigot
+            this.entitySpawner.findChunksForSpawning(this, this.spawnHostileMobs && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.spawnPeacefulMobs && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldInfo.getWorldTotalTime() % 400L == 0L);
+            timings.mobSpawn.stopTiming(); // Spigot
+            // CraftBukkit end
         }
 
+        timings.doChunkUnload.startTiming(); // Spigot
         this.profiler.endStartSection("chunkSource");
         this.chunkProvider.tick();
         int j = this.calculateSkylightSubtracted(1.0F);
@@ -206,34 +436,57 @@
 
         if (this.getGameRules().getBoolean("doDaylightCycle"))
         {
-            this.worldInfo.setWorldTime(this.worldInfo.getWorldTime() + 1L);
+            this.setWorldTime(this.getWorldTime() + 1L);
         }
+        timings.doChunkUnload.stopTiming(); // Spigot
 
         this.profiler.endStartSection("tickPending");
+        timings.scheduledBlocks.startTiming(); // Spigot
         this.tickUpdates(false);
+        timings.scheduledBlocks.stopTiming(); // Spigot
         this.profiler.endStartSection("tickBlocks");
+        timings.chunkTicks.startTiming(); // Spigot
         this.updateBlocks();
+        timings.chunkTicks.stopTiming(); // Spigot
         this.profiler.endStartSection("chunkMap");
+        timings.doChunkMap.startTiming(); // Spigot
         this.playerChunkMap.tick();
+        timings.doChunkMap.stopTiming(); // Spigot
         this.profiler.endStartSection("village");
+        timings.doVillages.startTiming(); // Spigot
         this.villageCollection.tick();
         this.villageSiege.tick();
+        timings.doVillages.stopTiming(); // Spigot
         this.profiler.endStartSection("portalForcer");
+        timings.doPortalForcer.startTiming(); // Spigot
         this.worldTeleporter.removeStalePortalLocations(this.getTotalWorldTime());
+        for (Teleporter tele : customTeleporters)
+        {
+            tele.removeStalePortalLocations(getTotalWorldTime());
+        }
+        timings.doPortalForcer.stopTiming(); // Spigot
         this.profiler.endSection();
+        timings.doSounds.startTiming(); // Spigot
         this.sendQueuedBlockEvents();
+        timings.doSounds.stopTiming(); // Spigot
+
+        timings.doChunkGC.startTiming();// Spigot
+        this.getWorld().processChunkGC();
+        timings.doChunkGC.stopTiming(); // Spigot
     }
 
     @Nullable
     public Biome.SpawnListEntry getSpawnListEntryForTypeAt(EnumCreatureType creatureType, BlockPos pos)
     {
         List<Biome.SpawnListEntry> list = this.getChunkProvider().getPossibleCreatures(creatureType, pos);
+        list = net.minecraftforge.event.ForgeEventFactory.getPotentialSpawns(this, creatureType, pos, list);
         return list != null && !list.isEmpty() ? (Biome.SpawnListEntry)WeightedRandom.getRandomItem(this.rand, list) : null;
     }
 
     public boolean canCreatureTypeSpawnHere(EnumCreatureType creatureType, Biome.SpawnListEntry spawnListEntry, BlockPos pos)
     {
         List<Biome.SpawnListEntry> list = this.getChunkProvider().getPossibleCreatures(creatureType, pos);
+        list = net.minecraftforge.event.ForgeEventFactory.getPotentialSpawns(this, creatureType, pos, list);
         return list != null && !list.isEmpty() ? list.contains(spawnListEntry) : false;
     }
 
@@ -252,7 +505,7 @@
                 {
                     ++i;
                 }
-                else if (entityplayer.isPlayerSleeping())
+                else if (entityplayer.isPlayerSleeping() || entityplayer.fauxSleeping)
                 {
                     ++j;
                 }
@@ -279,25 +532,28 @@
 
     private void resetRainAndThunder()
     {
-        this.worldInfo.setRainTime(0);
-        this.worldInfo.setRaining(false);
-        this.worldInfo.setThunderTime(0);
-        this.worldInfo.setThundering(false);
+        this.provider.resetRainAndThunder();
     }
 
     public boolean areAllPlayersAsleep()
     {
         if (this.allPlayersSleeping && !this.isRemote)
         {
+            // CraftBukkit - This allows us to assume that some people are in bed but not really, allowing time to pass in spite of AFKers
+            boolean foundActualSleepers = false;
+
             for (EntityPlayer entityplayer : this.playerEntities)
             {
-                if (!entityplayer.isSpectator() && !entityplayer.isPlayerFullyAsleep())
+                if (entityplayer.isPlayerFullyAsleep()) {
+                    foundActualSleepers = true;
+                }
+                if (!entityplayer.isSpectator() && !entityplayer.isPlayerFullyAsleep() || entityplayer.fauxSleeping)
                 {
                     return false;
                 }
             }
 
-            return true;
+            return foundActualSleepers;
         }
         else
         {
@@ -333,7 +589,7 @@
         this.worldInfo.setSpawnZ(j);
     }
 
-    protected boolean isChunkLoaded(int x, int z, boolean allowEmpty)
+    public boolean isChunkLoaded(int x, int z, boolean allowEmpty)
     {
         return this.getChunkProvider().chunkExists(x, z);
     }
@@ -342,7 +598,7 @@
     {
         this.profiler.startSection("playerCheckLight");
 
-        if (!this.playerEntities.isEmpty())
+        if (spigotConfig.randomLightUpdates && !this.playerEntities.isEmpty()) // Spigot
         {
             int i = this.rand.nextInt(this.playerEntities.size());
             EntityPlayer entityplayer = this.playerEntities.get(i);
@@ -375,99 +631,89 @@
             boolean flag1 = this.isThundering();
             this.profiler.startSection("pollingChunks");
 
-            for (Iterator<Chunk> iterator = this.playerChunkMap.getChunkIterator(); iterator.hasNext(); this.profiler.endSection())
+            for (Iterator<Chunk> iterator = getPersistentChunkIterable(this.playerChunkMap.getChunkIterator()); iterator.hasNext(); this.profiler.endSection())
             {
                 this.profiler.startSection("getChunk");
                 Chunk chunk = iterator.next();
-                int j = chunk.x * 16;
-                int k = chunk.z * 16;
-                this.profiler.endStartSection("checkNextLight");
-                chunk.enqueueRelightChecks();
-                this.profiler.endStartSection("tickChunk");
-                chunk.onTick(false);
-                this.profiler.endStartSection("thunder");
+                    int j = chunk.x * 16;
+                    int k = chunk.z * 16;
+                    this.profiler.endStartSection("checkNextLight");
+                    chunk.enqueueRelightChecks();
+                    this.profiler.endStartSection("tickChunk");
+                    chunk.onTick(false);
+                    if (!chunk.areNeighborsLoaded(1)) continue; // Spigot
+                    this.profiler.endStartSection("thunder");
 
-                if (flag && flag1 && this.rand.nextInt(100000) == 0)
-                {
-                    this.updateLCG = this.updateLCG * 3 + 1013904223;
-                    int l = this.updateLCG >> 2;
-                    BlockPos blockpos = this.adjustPosToNearbyEntity(new BlockPos(j + (l & 15), 0, k + (l >> 8 & 15)));
+                    if (this.provider.canDoLightning(chunk) && flag && flag1 && this.rand.nextInt(100000) == 0) {
+                        this.updateLCG = this.updateLCG * 3 + 1013904223;
+                        int l = this.updateLCG >> 2;
+                        BlockPos blockpos = this.adjustPosToNearbyEntity(new BlockPos(j + (l & 15), 0, k + (l >> 8 & 15)));
 
-                    if (this.isRainingAt(blockpos))
-                    {
-                        DifficultyInstance difficultyinstance = this.getDifficultyForLocation(blockpos);
+                        if (this.isRainingAt(blockpos)) {
+                            DifficultyInstance difficultyinstance = this.getDifficultyForLocation(blockpos);
 
-                        if (this.getGameRules().getBoolean("doMobSpawning") && this.rand.nextDouble() < (double)difficultyinstance.getAdditionalDifficulty() * 0.01D)
-                        {
-                            EntitySkeletonHorse entityskeletonhorse = new EntitySkeletonHorse(this);
-                            entityskeletonhorse.setTrap(true);
-                            entityskeletonhorse.setGrowingAge(0);
-                            entityskeletonhorse.setPosition((double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ());
-                            this.spawnEntity(entityskeletonhorse);
-                            this.addWeatherEffect(new EntityLightningBolt(this, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), true));
+                            if (this.getGameRules().getBoolean("doMobSpawning") && this.rand.nextDouble() < (double) difficultyinstance.getAdditionalDifficulty() * 0.01D) {
+                                EntitySkeletonHorse entityskeletonhorse = new EntitySkeletonHorse(this);
+                                entityskeletonhorse.setTrap(true);
+                                entityskeletonhorse.setGrowingAge(0);
+                                entityskeletonhorse.setPosition((double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ());
+                                this.addEntity(entityskeletonhorse, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING); // CraftBukkit
+                                this.addWeatherEffect(new EntityLightningBolt(this, (double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ(), true));
+                            } else {
+                                this.addWeatherEffect(new EntityLightningBolt(this, (double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ(), false));
+                            }
                         }
-                        else
-                        {
-                            this.addWeatherEffect(new EntityLightningBolt(this, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), false));
-                        }
                     }
-                }
 
-                this.profiler.endStartSection("iceandsnow");
+                    this.profiler.endStartSection("iceandsnow");
 
-                if (this.rand.nextInt(16) == 0)
-                {
-                    this.updateLCG = this.updateLCG * 3 + 1013904223;
-                    int j2 = this.updateLCG >> 2;
-                    BlockPos blockpos1 = this.getPrecipitationHeight(new BlockPos(j + (j2 & 15), 0, k + (j2 >> 8 & 15)));
-                    BlockPos blockpos2 = blockpos1.down();
+                    if (this.provider.canDoRainSnowIce(chunk) && this.rand.nextInt(16) == 0) {
+                        this.updateLCG = this.updateLCG * 3 + 1013904223;
+                        int j2 = this.updateLCG >> 2;
+                        BlockPos blockpos1 = this.getPrecipitationHeight(new BlockPos(j + (j2 & 15), 0, k + (j2 >> 8 & 15)));
+                        BlockPos blockpos2 = blockpos1.down();
 
-                    if (this.canBlockFreezeNoWater(blockpos2))
-                    {
-                        this.setBlockState(blockpos2, Blocks.ICE.getDefaultState());
-                    }
+                        if (this.isAreaLoaded(blockpos2, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
+                            if (this.canBlockFreezeNoWater(blockpos2)) {
+                                // this.setBlockState(blockpos2, Blocks.ICE.getDefaultState());
+                                org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory.handleBlockFormEvent(this, blockpos2, Blocks.ICE.getDefaultState(), null);
+                            }
 
-                    if (flag && this.canSnowAt(blockpos1, true))
-                    {
-                        this.setBlockState(blockpos1, Blocks.SNOW_LAYER.getDefaultState());
-                    }
+                        if (flag && this.canSnowAt(blockpos1, true)) {
+                            // this.setBlockState(blockpos1, Blocks.SNOW_LAYER.getDefaultState());
+                            org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory.handleBlockFormEvent(this, blockpos1, Blocks.SNOW_LAYER.getDefaultState(), null);
+                        }
 
-                    if (flag && this.getBiome(blockpos2).canRain())
-                    {
-                        this.getBlockState(blockpos2).getBlock().fillWithRain(this, blockpos2);
+                        if (flag && this.getBiome(blockpos2).canRain()) {
+                            this.getBlockState(blockpos2).getBlock().fillWithRain(this, blockpos2);
+                        }
                     }
-                }
 
-                this.profiler.endStartSection("tickBlocks");
+                    timings.chunkTicksBlocks.startTiming(); // Paper
+                    if (i > 0) {
+                        for (ExtendedBlockStorage extendedblockstorage : chunk.getBlockStorageArray()) {
+                            if (extendedblockstorage != Chunk.NULL_BLOCK_STORAGE && extendedblockstorage.needsRandomTick()) {
+                                for (int i1 = 0; i1 < i; ++i1) {
+                                    this.updateLCG = this.updateLCG * 3 + 1013904223;
+                                    int j1 = this.updateLCG >> 2;
+                                    int k1 = j1 & 15;
+                                    int l1 = j1 >> 8 & 15;
+                                    int i2 = j1 >> 16 & 15;
+                                    IBlockState iblockstate = extendedblockstorage.get(k1, i2, l1);
+                                    Block block = iblockstate.getBlock();
+                                    this.profiler.startSection("randomTick");
 
-                if (i > 0)
-                {
-                    for (ExtendedBlockStorage extendedblockstorage : chunk.getBlockStorageArray())
-                    {
-                        if (extendedblockstorage != Chunk.NULL_BLOCK_STORAGE && extendedblockstorage.needsRandomTick())
-                        {
-                            for (int i1 = 0; i1 < i; ++i1)
-                            {
-                                this.updateLCG = this.updateLCG * 3 + 1013904223;
-                                int j1 = this.updateLCG >> 2;
-                                int k1 = j1 & 15;
-                                int l1 = j1 >> 8 & 15;
-                                int i2 = j1 >> 16 & 15;
-                                IBlockState iblockstate = extendedblockstorage.get(k1, i2, l1);
-                                Block block = iblockstate.getBlock();
-                                this.profiler.startSection("randomTick");
+                                    if (block.getTickRandomly()) {
+                                        block.randomTick(this, new BlockPos(k1 + j, i2 + extendedblockstorage.getYLocation(), l1 + k), iblockstate, this.rand);
+                                    }
 
-                                if (block.getTickRandomly())
-                                {
-                                    block.randomTick(this, new BlockPos(k1 + j, i2 + extendedblockstorage.getYLocation(), l1 + k), iblockstate, this.rand);
+                                    this.profiler.endSection();
                                 }
-
-                                this.profiler.endSection();
                             }
                         }
                     }
+                    timings.chunkTicksBlocks.stopTiming(); // Paper
                 }
-            }
 
             this.profiler.endSection();
         }
@@ -525,7 +771,10 @@
         {
             if (blockIn.requiresUpdates())
             {
-                if (this.isAreaLoaded(pos.add(-8, -8, -8), pos.add(8, 8, 8)))
+                //Keeping here as a note for future when it may be restored.
+                boolean isForced = getPersistentChunks().containsKey(new ChunkPos(pos));
+                int range = isForced ? 0 : 8;
+                if (this.isAreaLoaded(pos.add(-range, -range, -range), pos.add(range, range, range)))
                 {
                     IBlockState iblockstate = this.getBlockState(pos);
 
@@ -561,6 +810,7 @@
 
     public void scheduleBlockUpdate(BlockPos pos, Block blockIn, int delay, int priority)
     {
+        if (blockIn == null) return; //Forge: Prevent null blocks from ticking, can happen if blocks are removed in old worlds. TODO: Fix real issue causing block to be null.
         NextTickListEntry nextticklistentry = new NextTickListEntry(pos, blockIn);
         nextticklistentry.setPriority(priority);
         Material material = blockIn.getDefaultState().getMaterial();
@@ -579,9 +829,9 @@
 
     public void updateEntities()
     {
-        if (this.playerEntities.isEmpty())
+        if (this.playerEntities.isEmpty() && getPersistentChunks().isEmpty())
         {
-            if (this.updateEntityTick++ >= 300)
+            if (this.updateEntityTick++ >= MohistConfig.instance.entityTickLimit.getValue()) // Mohist // by CraftDream
             {
                 return;
             }
@@ -593,6 +843,7 @@
 
         this.provider.onWorldUpdateEntities();
         super.updateEntities();
+        spigotConfig.currentPrimedTnt = 0; // Spigot
     }
 
     protected void tickPlayers()
@@ -668,19 +919,21 @@
         {
             int i = this.pendingTickListEntriesTreeSet.size();
 
-            if (i != this.pendingTickListEntriesHashSet.size())
-            {
-                throw new IllegalStateException("TickNextTick list out of synch");
-            }
-            else
-            {
                 if (i > 65536)
                 {
-                    i = 65536;
+                    // i = 65536;
+                    // CraftBukkit start - If the server has too much to process over time, try to alleviate that
+                    if (i > 20 * 65536) {
+                        i = i / 20;
+                    } else {
+                        i = 65536;
+                    }
+                    // CraftBukkit end
                 }
 
-                this.profiler.startSection("cleaning");
+            	this.profiler.startSection("cleaning");
 
+                timings.scheduledBlocksCleanup.startTiming(); // Paper
                 for (int j = 0; j < i; ++j)
                 {
                     NextTickListEntry nextticklistentry = this.pendingTickListEntriesTreeSet.first();
@@ -694,21 +947,26 @@
                     this.pendingTickListEntriesHashSet.remove(nextticklistentry);
                     this.pendingTickListEntriesThisTick.add(nextticklistentry);
                 }
-
+                timings.scheduledBlocksCleanup.stopTiming(); // Paper
                 this.profiler.endSection();
                 this.profiler.startSection("ticking");
                 Iterator<NextTickListEntry> iterator = this.pendingTickListEntriesThisTick.iterator();
+                timings.scheduledBlocksTicking.startTiming(); // Paper
 
                 while (iterator.hasNext())
                 {
                     NextTickListEntry nextticklistentry1 = iterator.next();
                     iterator.remove();
+                    //Keeping here as a note for future when it may be restored.
+                    //boolean isForced = getPersistentChunks().containsKey(new ChunkPos(nextticklistentry.xCoord >> 4, nextticklistentry.zCoord >> 4));
+                    //byte b0 = isForced ? 0 : 8;
                     int k = 0;
 
                     if (this.isAreaLoaded(nextticklistentry1.position.add(0, 0, 0), nextticklistentry1.position.add(0, 0, 0)))
                     {
                         IBlockState iblockstate = this.getBlockState(nextticklistentry1.position);
-
+                        co.aikar.timings.Timing timing = iblockstate.getBlock().getTiming(); // Paper
+                        timing.startTiming(); // Paper
                         if (iblockstate.getMaterial() != Material.AIR && Block.isEqualTo(iblockstate.getBlock(), nextticklistentry1.getBlock()))
                         {
                             try
@@ -723,17 +981,17 @@
                                 throw new ReportedException(crashreport);
                             }
                         }
+                        timing.stopTiming(); // Paper
                     }
                     else
                     {
                         this.scheduleUpdate(nextticklistentry1.position, nextticklistentry1.getBlock(), 0);
                     }
                 }
-
+                timings.scheduledBlocksTicking.stopTiming(); // Paper
                 this.profiler.endSection();
                 this.pendingTickListEntriesThisTick.clear();
-                return !this.pendingTickListEntriesTreeSet.isEmpty();
-            }
+				return !this.pendingTickListEntriesTreeSet.isEmpty();
         }
     }
 
@@ -796,21 +1054,6 @@
         return list;
     }
 
-    public void updateEntityWithOptionalForce(Entity entityIn, boolean forceUpdate)
-    {
-        if (!this.canSpawnAnimals() && (entityIn instanceof EntityAnimal || entityIn instanceof EntityWaterMob))
-        {
-            entityIn.setDead();
-        }
-
-        if (!this.canSpawnNPCs() && entityIn instanceof INpc)
-        {
-            entityIn.setDead();
-        }
-
-        super.updateEntityWithOptionalForce(entityIn, forceUpdate);
-    }
-
     private boolean canSpawnNPCs()
     {
         return this.mcServer.getCanSpawnNPCs();
@@ -824,11 +1067,59 @@
     protected IChunkProvider createChunkProvider()
     {
         IChunkLoader ichunkloader = this.saveHandler.getChunkLoader(this.provider);
-        return new ChunkProviderServer(this, ichunkloader, this.provider.createChunkGenerator());
+        // Cauldron start - if provider is vanilla, proceed to create a bukkit compatible chunk generator
+        if (this.provider.getClass().toString().length() <= 3 || this.provider.getClass().toString().contains("net.minecraft")) {
+            // CraftBukkit start
+            org.bukkit.craftbukkit.v1_12_R1.generator.InternalChunkGenerator gen;
+
+            if (this.generator != null) {
+                gen = new org.bukkit.craftbukkit.v1_12_R1.generator.CustomChunkGenerator(this, this.getSeed(), this.generator);
+            } else if (this.provider instanceof WorldProviderHell) {
+                gen = new org.bukkit.craftbukkit.v1_12_R1.generator.NetherChunkGenerator(this, this.getSeed());
+            } else if (this.provider instanceof WorldProviderEnd) {
+                gen = new org.bukkit.craftbukkit.v1_12_R1.generator.SkyLandsChunkGenerator(this, this.getSeed());
+            } else {
+                gen = new org.bukkit.craftbukkit.v1_12_R1.generator.NormalChunkGenerator(this, this.getSeed());
+            }
+
+            this.chunkProvider = new ChunkProviderServer(this, ichunkloader, new co.aikar.timings.TimedChunkGenerator(this, gen)); // Paper
+            // CraftBukkit end
+        } else {
+            // custom provider, load normally for forge compatibility
+            this.chunkProvider = new ChunkProviderServer(this, ichunkloader, this.provider.createChunkGenerator());
+        }
+        // Cauldron end
+        return chunkProvider;
     }
 
+    public List<TileEntity> getTileEntities(int i, int j, int k, int l, int i1, int j1) {
+        ArrayList arraylist = Lists.newArrayList();
+
+        // CraftBukkit start - Get tile entities from chunks instead of world
+        for (int chunkX = (i >> 4); chunkX <= ((l - 1) >> 4); chunkX++) {
+            for (int chunkZ = (k >> 4); chunkZ <= ((j1 - 1) >> 4); chunkZ++) {
+                Chunk chunk = getChunkFromChunkCoords(chunkX, chunkZ);
+                if (chunk == null) {
+                    continue;
+                }
+                for (Object te : chunk.getTileEntityMap().values()) {
+                    TileEntity tileentity = (TileEntity) te;
+                    if ((tileentity.getPos().getX() >= i) && (tileentity.getPos().getY() >= j) && (tileentity.getPos().getZ() >= k) && (tileentity.getPos().getX() < l) && (tileentity.getPos().getY() < i1) && (tileentity.getPos().getZ() < j1)) {
+                        arraylist.add(tileentity);
+                    }
+                }
+            }
+        }
+
+        return arraylist;
+    }
+
     public boolean isBlockModifiable(EntityPlayer player, BlockPos pos)
     {
+        return super.isBlockModifiable(player, pos);
+    }
+    public boolean canMineBlockBody(EntityPlayer player, BlockPos pos)
+    {
         return !this.mcServer.isBlockProtected(this, pos, player) && this.getWorldBorder().contains(pos);
     }
 
@@ -894,7 +1185,24 @@
         }
         else
         {
+            if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(this, settings)) return;
             this.findingSpawnPoint = true;
+            // CraftBukkit start
+            if (this.generator != null) {
+                Random rand = new Random(this.getSeed());
+                org.bukkit.Location spawn = this.generator.getFixedSpawnLocation(((WorldServer) this).getWorld(), rand);
+
+                if (spawn != null) {
+                    if (spawn.getWorld() != ((WorldServer) this).getWorld()) {
+                        throw new IllegalStateException("Cannot set spawn point for " + this.worldInfo.getWorldName() + " to be in another world (" + spawn.getWorld().getName() + ")");
+                    } else {
+                        this.worldInfo.setSpawn(new BlockPos(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()));
+                        this.findingSpawnPoint = false;
+                        return;
+                    }
+                }
+            }
+            // CraftBukkit end
             BiomeProvider biomeprovider = this.provider.getBiomeProvider();
             List<Biome> list = biomeprovider.getBiomesToSpawnIn();
             Random random = new Random(this.getSeed());
@@ -915,7 +1223,7 @@
 
             int l = 0;
 
-            while (!this.provider.canCoordinateBeSpawn(i, k))
+            while (!this.canSpawn(i, k)) // CraftBukkit - use our own canSpawn
             {
                 i += random.nextInt(64) - random.nextInt(64);
                 k += random.nextInt(64) - random.nextInt(64);
@@ -966,6 +1274,8 @@
 
         if (chunkproviderserver.canSave())
         {
+            org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit
+            timings.worldSave.startTiming(); // Paper
             if (progressCallback != null)
             {
                 progressCallback.displaySavingString("Saving level");
@@ -978,15 +1288,11 @@
                 progressCallback.displayLoadingString("Saving chunks");
             }
 
+            timings.worldSaveChunks.startTiming(); // Paper
             chunkproviderserver.saveChunks(all);
-
-            for (Chunk chunk : Lists.newArrayList(chunkproviderserver.getLoadedChunks()))
-            {
-                if (chunk != null && !this.playerChunkMap.contains(chunk.x, chunk.z))
-                {
-                    chunkproviderserver.queueUnload(chunk);
-                }
-            }
+            timings.worldSaveChunks.stopTiming(); // Paper
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Save(this));
+            timings.worldSave.stopTiming(); // Paper
         }
     }
 
@@ -1002,6 +1308,7 @@
 
     protected void saveLevel() throws MinecraftException
     {
+        timings.worldSaveLevel.startTiming(); // Paper
         this.checkSessionLock();
 
         for (WorldServer worldserver : this.mcServer.worlds)
@@ -1012,6 +1319,12 @@
             }
         }
 
+        // CraftBukkit start - Save secondary data for nether/end
+        if (this instanceof WorldServerMulti) {
+            ((WorldServerMulti) this).saveAdditionalData();
+        }
+        // CraftBukkit end
+
         this.worldInfo.setBorderSize(this.getWorldBorder().getDiameter());
         this.worldInfo.getBorderCenterX(this.getWorldBorder().getCenterX());
         this.worldInfo.getBorderCenterZ(this.getWorldBorder().getCenterZ());
@@ -1023,18 +1336,27 @@
         this.worldInfo.setBorderLerpTime(this.getWorldBorder().getTimeUntilTarget());
         this.saveHandler.saveWorldInfoWithPlayer(this.worldInfo, this.mcServer.getPlayerList().getHostPlayerData());
         this.mapStorage.saveAllData();
+        this.perWorldStorage.saveAllData();
+        timings.worldSaveLevel.stopTiming(); // Paper
     }
 
     public boolean spawnEntity(Entity entityIn)
     {
-        return this.canAddEntity(entityIn) ? super.spawnEntity(entityIn) : false;
+        // CraftBukkit start - Used for entities other than creatures
+        return addEntity(entityIn, CreatureSpawnEvent.SpawnReason.DEFAULT);
     }
 
+    public boolean addEntity(Entity entityIn, CreatureSpawnEvent.SpawnReason spawnReason) {
+        // World.spawnEntity(Entity) will call this, and we still want to perform
+        // existing entity checking when it's called with a SpawnReason
+        return this.canAddEntity(entityIn) ? super.addEntity(entityIn, spawnReason) : false;
+    }
+
     public void loadEntities(Collection<Entity> entityCollection)
     {
         for (Entity entity : Lists.newArrayList(entityCollection))
         {
-            if (this.canAddEntity(entity))
+            if (this.canAddEntity(entity) && !net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entity, this)))
             {
                 this.loadedEntityList.add(entity);
                 this.onEntityAdded(entity);
@@ -1046,7 +1368,6 @@
     {
         if (entityIn.isDead)
         {
-            LOGGER.warn("Tried to add entity {} but it was marked as removed already", (Object)EntityList.getKey(entityIn));
             return false;
         }
         else
@@ -1057,7 +1378,7 @@
             {
                 Entity entity = this.entitiesByUuid.get(uuid);
 
-                if (this.unloadedEntityList.contains(entity))
+                if (this.unloadedEntityList.contains(entity) || entity.isDead) // Paper - if dupe is dead, overwrite
                 {
                     this.unloadedEntityList.remove(entity);
                 }
@@ -1065,7 +1386,6 @@
                 {
                     if (!(entityIn instanceof EntityPlayer))
                     {
-                        LOGGER.warn("Keeping entity {} that already exists with UUID {}", EntityList.getKey(entity), uuid.toString());
                         return false;
                     }
 
@@ -1113,9 +1433,17 @@
 
     public boolean addWeatherEffect(Entity entityIn)
     {
+        if (entityIn instanceof net.minecraft.entity.effect.EntityLightningBolt) {
+            LightningStrikeEvent lightning = new LightningStrikeEvent(this.getWorld(), (org.bukkit.entity.LightningStrike) entityIn.getBukkitEntity());
+            this.getServer().getPluginManager().callEvent(lightning);
+
+            if (lightning.isCancelled()) {
+                return false;
+            }
+        }
         if (super.addWeatherEffect(entityIn))
         {
-            this.mcServer.getPlayerList().sendToAllNearExcept((EntityPlayer)null, entityIn.posX, entityIn.posY, entityIn.posZ, 512.0D, this.provider.getDimensionType().getId(), new SPacketSpawnGlobalEntity(entityIn));
+            this.mcServer.getPlayerList().sendToAllNearExcept((EntityPlayer)null, entityIn.posX, entityIn.posY, entityIn.posZ, 512.0D, dimension, new SPacketSpawnGlobalEntity(entityIn)); // CraftBukkit - Use dimension  // Paper - use world instead of dimension
             return true;
         }
         else
@@ -1136,10 +1464,15 @@
 
     public Explosion newExplosion(@Nullable Entity entityIn, double x, double y, double z, float strength, boolean isFlaming, boolean isSmoking)
     {
-        Explosion explosion = new Explosion(this, entityIn, x, y, z, strength, isFlaming, isSmoking);
-        explosion.doExplosionA();
-        explosion.doExplosionB(false);
-
+        Explosion explosion = super.newExplosion(entityIn, x, y, z, strength, isFlaming, isSmoking);
+        if(explosion == null) return null;
+        try{
+            if (explosion.wasCanceled)
+            {
+                return explosion;
+            }
+        }catch(Exception e){return null;}
+        if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
         if (!isSmoking)
         {
             explosion.clearAffectedBlockPositions();
@@ -1182,7 +1515,8 @@
             {
                 if (this.fireBlockEvent(blockeventdata))
                 {
-                    this.mcServer.getPlayerList().sendToAllNearExcept((EntityPlayer)null, (double)blockeventdata.getPosition().getX(), (double)blockeventdata.getPosition().getY(), (double)blockeventdata.getPosition().getZ(), 64.0D, this.provider.getDimensionType().getId(), new SPacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
+                    // CraftBukkit - this.provider.dimension -> this.dimension
+                    this.mcServer.getPlayerList().sendToAllNearExcept((EntityPlayer)null, (double)blockeventdata.getPosition().getX(), (double)blockeventdata.getPosition().getY(), (double)blockeventdata.getPosition().getZ(), 64.0D, dimension, new SPacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
                 }
             }
 
@@ -1208,27 +1542,31 @@
 
         if (this.prevRainingStrength != this.rainingStrength)
         {
-            this.mcServer.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(7, this.rainingStrength), this.provider.getDimensionType().getId());
+            this.mcServer.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(7, this.rainingStrength), this.provider.getDimension());
         }
 
         if (this.prevThunderingStrength != this.thunderingStrength)
         {
-            this.mcServer.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(8, this.thunderingStrength), this.provider.getDimensionType().getId());
+            this.mcServer.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(8, this.thunderingStrength), this.provider.getDimension());
         }
 
+        /* The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+         * rather than to all players on the server. This is what causes the client-side rain, as the
+         * client believes that it has started raining locally, rather than in another dimension.
+         */
         if (flag != this.isRaining())
         {
             if (flag)
             {
-                this.mcServer.getPlayerList().sendPacketToAllPlayers(new SPacketChangeGameState(2, 0.0F));
+                this.mcServer.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(2, 0.0F), this.provider.getDimension());
             }
             else
             {
-                this.mcServer.getPlayerList().sendPacketToAllPlayers(new SPacketChangeGameState(1, 0.0F));
+                this.mcServer.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(1, 0.0F), this.provider.getDimension());
             }
 
-            this.mcServer.getPlayerList().sendPacketToAllPlayers(new SPacketChangeGameState(7, this.rainingStrength));
-            this.mcServer.getPlayerList().sendPacketToAllPlayers(new SPacketChangeGameState(8, this.thunderingStrength));
+            this.mcServer.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(7, this.rainingStrength), this.provider.getDimension());
+            this.mcServer.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(8, this.thunderingStrength), this.provider.getDimension());
         }
     }
 
@@ -1265,11 +1603,19 @@
 
     public void spawnParticle(EnumParticleTypes particleType, boolean longDistance, double xCoord, double yCoord, double zCoord, int numberOfParticles, double xOffset, double yOffset, double zOffset, double particleSpeed, int... particleArguments)
     {
+        // CraftBukkit - visibility api support
+        sendParticles(null, particleType, longDistance, xCoord, yCoord, zCoord, numberOfParticles, xOffset, yOffset, zOffset, particleSpeed, particleArguments);
+    }
+
+    // Paper start - Particle API Expansion
+    public void sendParticles(@Nullable EntityPlayerMP sender, EnumParticleTypes particleType, boolean longDistance, double xCoord, double yCoord, double zCoord, int numberOfParticles, double xOffset, double yOffset, double zOffset, double particleSpeed, int... particleArguments) {
+        // CraftBukkit end
         SPacketParticles spacketparticles = new SPacketParticles(particleType, longDistance, (float)xCoord, (float)yCoord, (float)zCoord, (float)xOffset, (float)yOffset, (float)zOffset, (float)particleSpeed, numberOfParticles, particleArguments);
 
         for (int i = 0; i < this.playerEntities.size(); ++i)
         {
             EntityPlayerMP entityplayermp = (EntityPlayerMP)this.playerEntities.get(i);
+            if (sender != null && !entityplayermp.getBukkitEntity().canSee(sender.getBukkitEntity())) continue;
             this.sendPacketWithinDistance(entityplayermp, longDistance, xCoord, yCoord, zCoord, spacketparticles);
         }
     }
@@ -1323,6 +1669,11 @@
         return this.functionManager;
     }
 
+    public java.io.File getChunkSaveLocation()
+    {
+        return ((net.minecraft.world.chunk.storage.AnvilChunkLoader)getChunkProvider().chunkLoader).chunkSaveLocation;
+    }
+
     static class ServerBlockEventList extends ArrayList<BlockEventData>
         {
             private ServerBlockEventList()
